
I2C_SPS30_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002208  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080022c8  080022c8  000122c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022f8  080022f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080022f8  080022f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022f8  080022f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022f8  080022f8  000122f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022fc  080022fc  000122fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  0800230c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  0800230c  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000671b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001790  00000000  00000000  0002674f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  00027ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f0  00000000  00000000  000285b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f4b6  00000000  00000000  00028ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a077  00000000  00000000  0003805e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059764  00000000  00000000  000420d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009b839  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001668  00000000  00000000  0009b88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080022b0 	.word	0x080022b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080022b0 	.word	0x080022b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000226:	4b09      	ldr	r3, [pc, #36]	; (800024c <MX_GPIO_Init+0x2c>)
 8000228:	695a      	ldr	r2, [r3, #20]
 800022a:	4b08      	ldr	r3, [pc, #32]	; (800024c <MX_GPIO_Init+0x2c>)
 800022c:	2180      	movs	r1, #128	; 0x80
 800022e:	02c9      	lsls	r1, r1, #11
 8000230:	430a      	orrs	r2, r1
 8000232:	615a      	str	r2, [r3, #20]
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <MX_GPIO_Init+0x2c>)
 8000236:	695a      	ldr	r2, [r3, #20]
 8000238:	2380      	movs	r3, #128	; 0x80
 800023a:	02db      	lsls	r3, r3, #11
 800023c:	4013      	ands	r3, r2
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]

}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	46bd      	mov	sp, r7
 8000246:	b002      	add	sp, #8
 8000248:	bd80      	pop	{r7, pc}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	40021000 	.word	0x40021000

08000250 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000254:	4b1b      	ldr	r3, [pc, #108]	; (80002c4 <MX_I2C1_Init+0x74>)
 8000256:	4a1c      	ldr	r2, [pc, #112]	; (80002c8 <MX_I2C1_Init+0x78>)
 8000258:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800025a:	4b1a      	ldr	r3, [pc, #104]	; (80002c4 <MX_I2C1_Init+0x74>)
 800025c:	4a1b      	ldr	r2, [pc, #108]	; (80002cc <MX_I2C1_Init+0x7c>)
 800025e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000260:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <MX_I2C1_Init+0x74>)
 8000262:	2200      	movs	r2, #0
 8000264:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000266:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <MX_I2C1_Init+0x74>)
 8000268:	2201      	movs	r2, #1
 800026a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800026c:	4b15      	ldr	r3, [pc, #84]	; (80002c4 <MX_I2C1_Init+0x74>)
 800026e:	2200      	movs	r2, #0
 8000270:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000272:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <MX_I2C1_Init+0x74>)
 8000274:	2200      	movs	r2, #0
 8000276:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000278:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <MX_I2C1_Init+0x74>)
 800027a:	2200      	movs	r2, #0
 800027c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800027e:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <MX_I2C1_Init+0x74>)
 8000280:	2200      	movs	r2, #0
 8000282:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <MX_I2C1_Init+0x74>)
 8000286:	2200      	movs	r2, #0
 8000288:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <MX_I2C1_Init+0x74>)
 800028c:	0018      	movs	r0, r3
 800028e:	f000 fd7d 	bl	8000d8c <HAL_I2C_Init>
 8000292:	1e03      	subs	r3, r0, #0
 8000294:	d001      	beq.n	800029a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000296:	f000 f926 	bl	80004e6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800029a:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <MX_I2C1_Init+0x74>)
 800029c:	2100      	movs	r1, #0
 800029e:	0018      	movs	r0, r3
 80002a0:	f001 fa12 	bl	80016c8 <HAL_I2CEx_ConfigAnalogFilter>
 80002a4:	1e03      	subs	r3, r0, #0
 80002a6:	d001      	beq.n	80002ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80002a8:	f000 f91d 	bl	80004e6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <MX_I2C1_Init+0x74>)
 80002ae:	2100      	movs	r1, #0
 80002b0:	0018      	movs	r0, r3
 80002b2:	f001 fa55 	bl	8001760 <HAL_I2CEx_ConfigDigitalFilter>
 80002b6:	1e03      	subs	r3, r0, #0
 80002b8:	d001      	beq.n	80002be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80002ba:	f000 f914 	bl	80004e6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	20000028 	.word	0x20000028
 80002c8:	40005400 	.word	0x40005400
 80002cc:	2000090e 	.word	0x2000090e

080002d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002d0:	b590      	push	{r4, r7, lr}
 80002d2:	b08b      	sub	sp, #44	; 0x2c
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d8:	2414      	movs	r4, #20
 80002da:	193b      	adds	r3, r7, r4
 80002dc:	0018      	movs	r0, r3
 80002de:	2314      	movs	r3, #20
 80002e0:	001a      	movs	r2, r3
 80002e2:	2100      	movs	r1, #0
 80002e4:	f001 ffdc 	bl	80022a0 <memset>
  if(i2cHandle->Instance==I2C1)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a1c      	ldr	r2, [pc, #112]	; (8000360 <HAL_I2C_MspInit+0x90>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d132      	bne.n	8000358 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f2:	4b1c      	ldr	r3, [pc, #112]	; (8000364 <HAL_I2C_MspInit+0x94>)
 80002f4:	695a      	ldr	r2, [r3, #20]
 80002f6:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <HAL_I2C_MspInit+0x94>)
 80002f8:	2180      	movs	r1, #128	; 0x80
 80002fa:	02c9      	lsls	r1, r1, #11
 80002fc:	430a      	orrs	r2, r1
 80002fe:	615a      	str	r2, [r3, #20]
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <HAL_I2C_MspInit+0x94>)
 8000302:	695a      	ldr	r2, [r3, #20]
 8000304:	2380      	movs	r3, #128	; 0x80
 8000306:	02db      	lsls	r3, r3, #11
 8000308:	4013      	ands	r3, r2
 800030a:	613b      	str	r3, [r7, #16]
 800030c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800030e:	193b      	adds	r3, r7, r4
 8000310:	22c0      	movs	r2, #192	; 0xc0
 8000312:	0092      	lsls	r2, r2, #2
 8000314:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000316:	0021      	movs	r1, r4
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2212      	movs	r2, #18
 800031c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2203      	movs	r2, #3
 8000328:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2201      	movs	r2, #1
 800032e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000330:	187b      	adds	r3, r7, r1
 8000332:	4a0d      	ldr	r2, [pc, #52]	; (8000368 <HAL_I2C_MspInit+0x98>)
 8000334:	0019      	movs	r1, r3
 8000336:	0010      	movs	r0, r2
 8000338:	f000 fbb8 	bl	8000aac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <HAL_I2C_MspInit+0x94>)
 800033e:	69da      	ldr	r2, [r3, #28]
 8000340:	4b08      	ldr	r3, [pc, #32]	; (8000364 <HAL_I2C_MspInit+0x94>)
 8000342:	2180      	movs	r1, #128	; 0x80
 8000344:	0389      	lsls	r1, r1, #14
 8000346:	430a      	orrs	r2, r1
 8000348:	61da      	str	r2, [r3, #28]
 800034a:	4b06      	ldr	r3, [pc, #24]	; (8000364 <HAL_I2C_MspInit+0x94>)
 800034c:	69da      	ldr	r2, [r3, #28]
 800034e:	2380      	movs	r3, #128	; 0x80
 8000350:	039b      	lsls	r3, r3, #14
 8000352:	4013      	ands	r3, r2
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	b00b      	add	sp, #44	; 0x2c
 800035e:	bd90      	pop	{r4, r7, pc}
 8000360:	40005400 	.word	0x40005400
 8000364:	40021000 	.word	0x40021000
 8000368:	48000400 	.word	0x48000400

0800036c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000370:	f000 fa60 	bl	8000834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000374:	f000 f860 	bl	8000438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000378:	f7ff ff52 	bl	8000220 <MX_GPIO_Init>
  MX_I2C1_Init();
 800037c:	f7ff ff68 	bl	8000250 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(50);
 8000380:	2032      	movs	r0, #50	; 0x32
 8000382:	f000 fabb 	bl	80008fc <HAL_Delay>
	startMeasurement();
 8000386:	f000 f8fb 	bl	8000580 <startMeasurement>
	HAL_Delay(2000);
 800038a:	23fa      	movs	r3, #250	; 0xfa
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	0018      	movs	r0, r3
 8000390:	f000 fab4 	bl	80008fc <HAL_Delay>
	readDataReadyFlag();
 8000394:	f000 f922 	bl	80005dc <readDataReadyFlag>
	while (!(dataReadyFlag[1])) {
 8000398:	e001      	b.n	800039e <main+0x32>
		readDataReadyFlag();
 800039a:	f000 f91f 	bl	80005dc <readDataReadyFlag>
	while (!(dataReadyFlag[1])) {
 800039e:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <main+0x9c>)
 80003a0:	785b      	ldrb	r3, [r3, #1]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0f9      	beq.n	800039a <main+0x2e>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		readMeasuredValues();
 80003a6:	f000 f93d 	bl	8000624 <readMeasuredValues>
		massConcentration1_0 = pd.massConcentration1_0;
 80003aa:	4b18      	ldr	r3, [pc, #96]	; (800040c <main+0xa0>)
 80003ac:	881a      	ldrh	r2, [r3, #0]
 80003ae:	4b18      	ldr	r3, [pc, #96]	; (8000410 <main+0xa4>)
 80003b0:	801a      	strh	r2, [r3, #0]
		massConcentration2_5 = pd.massConcentration2_5;
 80003b2:	4b16      	ldr	r3, [pc, #88]	; (800040c <main+0xa0>)
 80003b4:	885a      	ldrh	r2, [r3, #2]
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <main+0xa8>)
 80003b8:	801a      	strh	r2, [r3, #0]
		massConcentration4_0 = pd.massConcentration4_0;
 80003ba:	4b14      	ldr	r3, [pc, #80]	; (800040c <main+0xa0>)
 80003bc:	889a      	ldrh	r2, [r3, #4]
 80003be:	4b16      	ldr	r3, [pc, #88]	; (8000418 <main+0xac>)
 80003c0:	801a      	strh	r2, [r3, #0]
		massConcentration10 = pd.massConcentration10;
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <main+0xa0>)
 80003c4:	88da      	ldrh	r2, [r3, #6]
 80003c6:	4b15      	ldr	r3, [pc, #84]	; (800041c <main+0xb0>)
 80003c8:	801a      	strh	r2, [r3, #0]
		numberConcentration0_5 = pd.numberConcentration0_5;
 80003ca:	4b10      	ldr	r3, [pc, #64]	; (800040c <main+0xa0>)
 80003cc:	891a      	ldrh	r2, [r3, #8]
 80003ce:	4b14      	ldr	r3, [pc, #80]	; (8000420 <main+0xb4>)
 80003d0:	801a      	strh	r2, [r3, #0]
		numberConcentration1_0 = pd.numberConcentration1_0;
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <main+0xa0>)
 80003d4:	895a      	ldrh	r2, [r3, #10]
 80003d6:	4b13      	ldr	r3, [pc, #76]	; (8000424 <main+0xb8>)
 80003d8:	801a      	strh	r2, [r3, #0]
		numberConcentration2_5 = pd.numberConcentration2_5;
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <main+0xa0>)
 80003dc:	899a      	ldrh	r2, [r3, #12]
 80003de:	4b12      	ldr	r3, [pc, #72]	; (8000428 <main+0xbc>)
 80003e0:	801a      	strh	r2, [r3, #0]
		numberConcentration4_0 = pd.numberConcentration4_0;
 80003e2:	4b0a      	ldr	r3, [pc, #40]	; (800040c <main+0xa0>)
 80003e4:	89da      	ldrh	r2, [r3, #14]
 80003e6:	4b11      	ldr	r3, [pc, #68]	; (800042c <main+0xc0>)
 80003e8:	801a      	strh	r2, [r3, #0]
		numberConcentration10 = pd.numberConcentration10;
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <main+0xa0>)
 80003ec:	8a1a      	ldrh	r2, [r3, #16]
 80003ee:	4b10      	ldr	r3, [pc, #64]	; (8000430 <main+0xc4>)
 80003f0:	801a      	strh	r2, [r3, #0]
		particleSize = pd.particleSize;
 80003f2:	4b06      	ldr	r3, [pc, #24]	; (800040c <main+0xa0>)
 80003f4:	8a5a      	ldrh	r2, [r3, #18]
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <main+0xc8>)
 80003f8:	801a      	strh	r2, [r3, #0]
		HAL_Delay(500);
 80003fa:	23fa      	movs	r3, #250	; 0xfa
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	0018      	movs	r0, r3
 8000400:	f000 fa7c 	bl	80008fc <HAL_Delay>
		readMeasuredValues();
 8000404:	e7cf      	b.n	80003a6 <main+0x3a>
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	200000ac 	.word	0x200000ac
 800040c:	200000b0 	.word	0x200000b0
 8000410:	20000074 	.word	0x20000074
 8000414:	20000076 	.word	0x20000076
 8000418:	20000078 	.word	0x20000078
 800041c:	2000007a 	.word	0x2000007a
 8000420:	2000007c 	.word	0x2000007c
 8000424:	2000007e 	.word	0x2000007e
 8000428:	20000080 	.word	0x20000080
 800042c:	20000082 	.word	0x20000082
 8000430:	20000084 	.word	0x20000084
 8000434:	20000086 	.word	0x20000086

08000438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b097      	sub	sp, #92	; 0x5c
 800043c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043e:	2428      	movs	r4, #40	; 0x28
 8000440:	193b      	adds	r3, r7, r4
 8000442:	0018      	movs	r0, r3
 8000444:	2330      	movs	r3, #48	; 0x30
 8000446:	001a      	movs	r2, r3
 8000448:	2100      	movs	r1, #0
 800044a:	f001 ff29 	bl	80022a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044e:	2318      	movs	r3, #24
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	0018      	movs	r0, r3
 8000454:	2310      	movs	r3, #16
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f001 ff21 	bl	80022a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	0018      	movs	r0, r3
 8000462:	2314      	movs	r3, #20
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f001 ff1a 	bl	80022a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800046c:	0021      	movs	r1, r4
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2202      	movs	r2, #2
 8000472:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000474:	187b      	adds	r3, r7, r1
 8000476:	2201      	movs	r2, #1
 8000478:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2210      	movs	r2, #16
 800047e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2200      	movs	r2, #0
 8000484:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000486:	187b      	adds	r3, r7, r1
 8000488:	0018      	movs	r0, r3
 800048a:	f001 f9b5 	bl	80017f8 <HAL_RCC_OscConfig>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000492:	f000 f828 	bl	80004e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000496:	2118      	movs	r1, #24
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2207      	movs	r2, #7
 800049c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2200      	movs	r2, #0
 80004a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2200      	movs	r2, #0
 80004ae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2100      	movs	r1, #0
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 fcbd 	bl	8001e34 <HAL_RCC_ClockConfig>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004be:	f000 f812 	bl	80004e6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2220      	movs	r2, #32
 80004c6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	0018      	movs	r0, r3
 80004d2:	f001 fde3 	bl	800209c <HAL_RCCEx_PeriphCLKConfig>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80004da:	f000 f804 	bl	80004e6 <Error_Handler>
  }
}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b017      	add	sp, #92	; 0x5c
 80004e4:	bd90      	pop	{r4, r7, pc}

080004e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ea:	b672      	cpsid	i
}
 80004ec:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80004ee:	e7fe      	b.n	80004ee <Error_Handler+0x8>

080004f0 <CalcCrc>:
//extern I2C_HandleTypeDef hi2c1;

uint8_t cmd[2], rx_buf[30], dataReadyFlag[3];
particleData pd;

uint8_t CalcCrc(uint8_t d[2]) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	uint8_t crc = 0xFF;
 80004f8:	2317      	movs	r3, #23
 80004fa:	18fb      	adds	r3, r7, r3
 80004fc:	22ff      	movs	r2, #255	; 0xff
 80004fe:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 8000500:	2300      	movs	r3, #0
 8000502:	613b      	str	r3, [r7, #16]
 8000504:	e031      	b.n	800056a <CalcCrc+0x7a>
		crc ^= d[i];
 8000506:	693b      	ldr	r3, [r7, #16]
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	18d3      	adds	r3, r2, r3
 800050c:	7819      	ldrb	r1, [r3, #0]
 800050e:	2217      	movs	r2, #23
 8000510:	18bb      	adds	r3, r7, r2
 8000512:	18ba      	adds	r2, r7, r2
 8000514:	7812      	ldrb	r2, [r2, #0]
 8000516:	404a      	eors	r2, r1
 8000518:	701a      	strb	r2, [r3, #0]
		for (uint8_t bit = 8; bit > 0; --bit) {
 800051a:	230f      	movs	r3, #15
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	2208      	movs	r2, #8
 8000520:	701a      	strb	r2, [r3, #0]
 8000522:	e01a      	b.n	800055a <CalcCrc+0x6a>
			if (crc & 0x80) {
 8000524:	2117      	movs	r1, #23
 8000526:	187b      	adds	r3, r7, r1
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	b25b      	sxtb	r3, r3
 800052c:	2b00      	cmp	r3, #0
 800052e:	da08      	bge.n	8000542 <CalcCrc+0x52>
				crc = (crc << 1) ^ 0x31u;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	18db      	adds	r3, r3, r3
 8000536:	b2da      	uxtb	r2, r3
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2131      	movs	r1, #49	; 0x31
 800053c:	404a      	eors	r2, r1
 800053e:	701a      	strb	r2, [r3, #0]
 8000540:	e005      	b.n	800054e <CalcCrc+0x5e>
			} else {
				crc = (crc << 1);
 8000542:	2317      	movs	r3, #23
 8000544:	18fa      	adds	r2, r7, r3
 8000546:	18fb      	adds	r3, r7, r3
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	18db      	adds	r3, r3, r3
 800054c:	7013      	strb	r3, [r2, #0]
		for (uint8_t bit = 8; bit > 0; --bit) {
 800054e:	220f      	movs	r2, #15
 8000550:	18bb      	adds	r3, r7, r2
 8000552:	18ba      	adds	r2, r7, r2
 8000554:	7812      	ldrb	r2, [r2, #0]
 8000556:	3a01      	subs	r2, #1
 8000558:	701a      	strb	r2, [r3, #0]
 800055a:	230f      	movs	r3, #15
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d1df      	bne.n	8000524 <CalcCrc+0x34>
	for (int i = 0; i < 2; i++) {
 8000564:	693b      	ldr	r3, [r7, #16]
 8000566:	3301      	adds	r3, #1
 8000568:	613b      	str	r3, [r7, #16]
 800056a:	693b      	ldr	r3, [r7, #16]
 800056c:	2b01      	cmp	r3, #1
 800056e:	ddca      	ble.n	8000506 <CalcCrc+0x16>
			}
		}
	}
	return crc;
 8000570:	2317      	movs	r3, #23
 8000572:	18fb      	adds	r3, r7, r3
 8000574:	781b      	ldrb	r3, [r3, #0]
}
 8000576:	0018      	movs	r0, r3
 8000578:	46bd      	mov	sp, r7
 800057a:	b006      	add	sp, #24
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <startMeasurement>:
void startMeasurement(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af02      	add	r7, sp, #8
	cmd[0] = 0x05;
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <startMeasurement+0x54>)
 8000588:	2205      	movs	r2, #5
 800058a:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x00;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <startMeasurement+0x54>)
 800058e:	2200      	movs	r2, #0
 8000590:	705a      	strb	r2, [r3, #1]
	uint8_t command[5] = { SPS30_START_MEASUREMENT_BYTE1,
 8000592:	003b      	movs	r3, r7
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
 8000598:	003b      	movs	r3, r7
 800059a:	2210      	movs	r2, #16
 800059c:	705a      	strb	r2, [r3, #1]
 800059e:	003b      	movs	r3, r7
 80005a0:	2205      	movs	r2, #5
 80005a2:	709a      	strb	r2, [r3, #2]
 80005a4:	003b      	movs	r3, r7
 80005a6:	2200      	movs	r2, #0
 80005a8:	70da      	strb	r2, [r3, #3]
	SPS30_START_MEASUREMENT_BYTE2, 0x05, 0x00, CalcCrc(cmd) };
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <startMeasurement+0x54>)
 80005ac:	0018      	movs	r0, r3
 80005ae:	f7ff ff9f 	bl	80004f0 <CalcCrc>
 80005b2:	0003      	movs	r3, r0
 80005b4:	001a      	movs	r2, r3
	uint8_t command[5] = { SPS30_START_MEASUREMENT_BYTE1,
 80005b6:	003b      	movs	r3, r7
 80005b8:	711a      	strb	r2, [r3, #4]
	HAL_I2C_Master_Transmit(&hi2c1, SPS30_I2C_ADDRESS, command, sizeof(command),
 80005ba:	003a      	movs	r2, r7
 80005bc:	4806      	ldr	r0, [pc, #24]	; (80005d8 <startMeasurement+0x58>)
 80005be:	23fa      	movs	r3, #250	; 0xfa
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2305      	movs	r3, #5
 80005c6:	21d2      	movs	r1, #210	; 0xd2
 80005c8:	f000 fc76 	bl	8000eb8 <HAL_I2C_Master_Transmit>
			500);
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b002      	add	sp, #8
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000088 	.word	0x20000088
 80005d8:	20000028 	.word	0x20000028

080005dc <readDataReadyFlag>:
void stopMeasurement(void) {
	cmd[0] = SPS30_STOP_MEASUREMENT_BYTE1;
	cmd[1] = SPS30_STOP_MEASUREMENT_BYTE2;
	HAL_I2C_Master_Transmit(&hi2c1, SPS30_I2C_ADDRESS, cmd, sizeof(cmd), 500);
}
void readDataReadyFlag(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af02      	add	r7, sp, #8
	cmd[0] = SPS30_READ_DATA_READY_FLAG_BYTE1;
 80005e2:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <readDataReadyFlag+0x3c>)
 80005e4:	2202      	movs	r2, #2
 80005e6:	701a      	strb	r2, [r3, #0]
	cmd[1] = SPS30_READ_DATA_READY_FLAG_BYTE2;
 80005e8:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <readDataReadyFlag+0x3c>)
 80005ea:	2202      	movs	r2, #2
 80005ec:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, SPS30_I2C_ADDRESS, cmd, sizeof(cmd), 500);
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <readDataReadyFlag+0x3c>)
 80005f0:	480a      	ldr	r0, [pc, #40]	; (800061c <readDataReadyFlag+0x40>)
 80005f2:	23fa      	movs	r3, #250	; 0xfa
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2302      	movs	r3, #2
 80005fa:	21d2      	movs	r1, #210	; 0xd2
 80005fc:	f000 fc5c 	bl	8000eb8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, SPS30_I2C_ADDRESS, dataReadyFlag,
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <readDataReadyFlag+0x44>)
 8000602:	4806      	ldr	r0, [pc, #24]	; (800061c <readDataReadyFlag+0x40>)
 8000604:	23fa      	movs	r3, #250	; 0xfa
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2303      	movs	r3, #3
 800060c:	21d2      	movs	r1, #210	; 0xd2
 800060e:	f000 fd5b 	bl	80010c8 <HAL_I2C_Master_Receive>
			sizeof(dataReadyFlag), 500);
}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000088 	.word	0x20000088
 800061c:	20000028 	.word	0x20000028
 8000620:	200000ac 	.word	0x200000ac

08000624 <readMeasuredValues>:
void readMeasuredValues(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af02      	add	r7, sp, #8
	cmd[0] = SPS30_READ_MEASUREMENT_BYTE1;
 800062a:	4b49      	ldr	r3, [pc, #292]	; (8000750 <readMeasuredValues+0x12c>)
 800062c:	2203      	movs	r2, #3
 800062e:	701a      	strb	r2, [r3, #0]
	cmd[1] = SPS30_READ_MEASUREMENT_BYTE2;
 8000630:	4b47      	ldr	r3, [pc, #284]	; (8000750 <readMeasuredValues+0x12c>)
 8000632:	2200      	movs	r2, #0
 8000634:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, SPS30_I2C_ADDRESS, cmd, sizeof(cmd), 500);
 8000636:	4a46      	ldr	r2, [pc, #280]	; (8000750 <readMeasuredValues+0x12c>)
 8000638:	4846      	ldr	r0, [pc, #280]	; (8000754 <readMeasuredValues+0x130>)
 800063a:	23fa      	movs	r3, #250	; 0xfa
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2302      	movs	r3, #2
 8000642:	21d2      	movs	r1, #210	; 0xd2
 8000644:	f000 fc38 	bl	8000eb8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, SPS30_I2C_ADDRESS, rx_buf, sizeof(rx_buf),
 8000648:	4a43      	ldr	r2, [pc, #268]	; (8000758 <readMeasuredValues+0x134>)
 800064a:	4842      	ldr	r0, [pc, #264]	; (8000754 <readMeasuredValues+0x130>)
 800064c:	23fa      	movs	r3, #250	; 0xfa
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	231e      	movs	r3, #30
 8000654:	21d2      	movs	r1, #210	; 0xd2
 8000656:	f000 fd37 	bl	80010c8 <HAL_I2C_Master_Receive>
			500);
	pd.massConcentration1_0 = ((rx_buf[0] << 8) | (rx_buf[1]));
 800065a:	4b3f      	ldr	r3, [pc, #252]	; (8000758 <readMeasuredValues+0x134>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	021b      	lsls	r3, r3, #8
 8000660:	b21a      	sxth	r2, r3
 8000662:	4b3d      	ldr	r3, [pc, #244]	; (8000758 <readMeasuredValues+0x134>)
 8000664:	785b      	ldrb	r3, [r3, #1]
 8000666:	b21b      	sxth	r3, r3
 8000668:	4313      	orrs	r3, r2
 800066a:	b21b      	sxth	r3, r3
 800066c:	b29a      	uxth	r2, r3
 800066e:	4b3b      	ldr	r3, [pc, #236]	; (800075c <readMeasuredValues+0x138>)
 8000670:	801a      	strh	r2, [r3, #0]
	pd.massConcentration2_5 = ((rx_buf[3] << 8) | (rx_buf[4]));
 8000672:	4b39      	ldr	r3, [pc, #228]	; (8000758 <readMeasuredValues+0x134>)
 8000674:	78db      	ldrb	r3, [r3, #3]
 8000676:	021b      	lsls	r3, r3, #8
 8000678:	b21a      	sxth	r2, r3
 800067a:	4b37      	ldr	r3, [pc, #220]	; (8000758 <readMeasuredValues+0x134>)
 800067c:	791b      	ldrb	r3, [r3, #4]
 800067e:	b21b      	sxth	r3, r3
 8000680:	4313      	orrs	r3, r2
 8000682:	b21b      	sxth	r3, r3
 8000684:	b29a      	uxth	r2, r3
 8000686:	4b35      	ldr	r3, [pc, #212]	; (800075c <readMeasuredValues+0x138>)
 8000688:	805a      	strh	r2, [r3, #2]
	pd.massConcentration4_0 = ((rx_buf[6] << 8) | (rx_buf[7]));
 800068a:	4b33      	ldr	r3, [pc, #204]	; (8000758 <readMeasuredValues+0x134>)
 800068c:	799b      	ldrb	r3, [r3, #6]
 800068e:	021b      	lsls	r3, r3, #8
 8000690:	b21a      	sxth	r2, r3
 8000692:	4b31      	ldr	r3, [pc, #196]	; (8000758 <readMeasuredValues+0x134>)
 8000694:	79db      	ldrb	r3, [r3, #7]
 8000696:	b21b      	sxth	r3, r3
 8000698:	4313      	orrs	r3, r2
 800069a:	b21b      	sxth	r3, r3
 800069c:	b29a      	uxth	r2, r3
 800069e:	4b2f      	ldr	r3, [pc, #188]	; (800075c <readMeasuredValues+0x138>)
 80006a0:	809a      	strh	r2, [r3, #4]
	pd.massConcentration10 = ((rx_buf[9] << 8) | (rx_buf[10]));
 80006a2:	4b2d      	ldr	r3, [pc, #180]	; (8000758 <readMeasuredValues+0x134>)
 80006a4:	7a5b      	ldrb	r3, [r3, #9]
 80006a6:	021b      	lsls	r3, r3, #8
 80006a8:	b21a      	sxth	r2, r3
 80006aa:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <readMeasuredValues+0x134>)
 80006ac:	7a9b      	ldrb	r3, [r3, #10]
 80006ae:	b21b      	sxth	r3, r3
 80006b0:	4313      	orrs	r3, r2
 80006b2:	b21b      	sxth	r3, r3
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	4b29      	ldr	r3, [pc, #164]	; (800075c <readMeasuredValues+0x138>)
 80006b8:	80da      	strh	r2, [r3, #6]
	pd.numberConcentration0_5 = ((rx_buf[12] << 8) | (rx_buf[13]));
 80006ba:	4b27      	ldr	r3, [pc, #156]	; (8000758 <readMeasuredValues+0x134>)
 80006bc:	7b1b      	ldrb	r3, [r3, #12]
 80006be:	021b      	lsls	r3, r3, #8
 80006c0:	b21a      	sxth	r2, r3
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <readMeasuredValues+0x134>)
 80006c4:	7b5b      	ldrb	r3, [r3, #13]
 80006c6:	b21b      	sxth	r3, r3
 80006c8:	4313      	orrs	r3, r2
 80006ca:	b21b      	sxth	r3, r3
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	4b23      	ldr	r3, [pc, #140]	; (800075c <readMeasuredValues+0x138>)
 80006d0:	811a      	strh	r2, [r3, #8]
	pd.numberConcentration1_0 = ((rx_buf[15] << 8) | (rx_buf[16]));
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <readMeasuredValues+0x134>)
 80006d4:	7bdb      	ldrb	r3, [r3, #15]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	b21a      	sxth	r2, r3
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <readMeasuredValues+0x134>)
 80006dc:	7c1b      	ldrb	r3, [r3, #16]
 80006de:	b21b      	sxth	r3, r3
 80006e0:	4313      	orrs	r3, r2
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	4b1d      	ldr	r3, [pc, #116]	; (800075c <readMeasuredValues+0x138>)
 80006e8:	815a      	strh	r2, [r3, #10]
	pd.numberConcentration2_5 = ((rx_buf[18] << 8) | (rx_buf[19]));
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <readMeasuredValues+0x134>)
 80006ec:	7c9b      	ldrb	r3, [r3, #18]
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	b21a      	sxth	r2, r3
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <readMeasuredValues+0x134>)
 80006f4:	7cdb      	ldrb	r3, [r3, #19]
 80006f6:	b21b      	sxth	r3, r3
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b21b      	sxth	r3, r3
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <readMeasuredValues+0x138>)
 8000700:	819a      	strh	r2, [r3, #12]
	pd.numberConcentration4_0 = ((rx_buf[21] << 8) | (rx_buf[22]));
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <readMeasuredValues+0x134>)
 8000704:	7d5b      	ldrb	r3, [r3, #21]
 8000706:	021b      	lsls	r3, r3, #8
 8000708:	b21a      	sxth	r2, r3
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <readMeasuredValues+0x134>)
 800070c:	7d9b      	ldrb	r3, [r3, #22]
 800070e:	b21b      	sxth	r3, r3
 8000710:	4313      	orrs	r3, r2
 8000712:	b21b      	sxth	r3, r3
 8000714:	b29a      	uxth	r2, r3
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <readMeasuredValues+0x138>)
 8000718:	81da      	strh	r2, [r3, #14]
	pd.numberConcentration10 = ((rx_buf[24] << 8) | (rx_buf[25]));
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <readMeasuredValues+0x134>)
 800071c:	7e1b      	ldrb	r3, [r3, #24]
 800071e:	021b      	lsls	r3, r3, #8
 8000720:	b21a      	sxth	r2, r3
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <readMeasuredValues+0x134>)
 8000724:	7e5b      	ldrb	r3, [r3, #25]
 8000726:	b21b      	sxth	r3, r3
 8000728:	4313      	orrs	r3, r2
 800072a:	b21b      	sxth	r3, r3
 800072c:	b29a      	uxth	r2, r3
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <readMeasuredValues+0x138>)
 8000730:	821a      	strh	r2, [r3, #16]
	pd.particleSize = ((rx_buf[27] << 8) | (rx_buf[28]));
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <readMeasuredValues+0x134>)
 8000734:	7edb      	ldrb	r3, [r3, #27]
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	b21a      	sxth	r2, r3
 800073a:	4b07      	ldr	r3, [pc, #28]	; (8000758 <readMeasuredValues+0x134>)
 800073c:	7f1b      	ldrb	r3, [r3, #28]
 800073e:	b21b      	sxth	r3, r3
 8000740:	4313      	orrs	r3, r2
 8000742:	b21b      	sxth	r3, r3
 8000744:	b29a      	uxth	r2, r3
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <readMeasuredValues+0x138>)
 8000748:	825a      	strh	r2, [r3, #18]
}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000088 	.word	0x20000088
 8000754:	20000028 	.word	0x20000028
 8000758:	2000008c 	.word	0x2000008c
 800075c:	200000b0 	.word	0x200000b0

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <HAL_MspInit+0x44>)
 8000768:	699a      	ldr	r2, [r3, #24]
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <HAL_MspInit+0x44>)
 800076c:	2101      	movs	r1, #1
 800076e:	430a      	orrs	r2, r1
 8000770:	619a      	str	r2, [r3, #24]
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <HAL_MspInit+0x44>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	2201      	movs	r2, #1
 8000778:	4013      	ands	r3, r2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_MspInit+0x44>)
 8000780:	69da      	ldr	r2, [r3, #28]
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <HAL_MspInit+0x44>)
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	0549      	lsls	r1, r1, #21
 8000788:	430a      	orrs	r2, r1
 800078a:	61da      	str	r2, [r3, #28]
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HAL_MspInit+0x44>)
 800078e:	69da      	ldr	r2, [r3, #28]
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	055b      	lsls	r3, r3, #21
 8000794:	4013      	ands	r3, r2
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b002      	add	sp, #8
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	40021000 	.word	0x40021000

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <NMI_Handler+0x4>

080007ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <HardFault_Handler+0x4>

080007b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007cc:	f000 f87a 	bl	80008c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e4:	480d      	ldr	r0, [pc, #52]	; (800081c <LoopForever+0x6>)
  ldr r1, =_edata
 80007e6:	490e      	ldr	r1, [pc, #56]	; (8000820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e8:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <LoopForever+0xe>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ec:	e002      	b.n	80007f4 <LoopCopyDataInit>

080007ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f2:	3304      	adds	r3, #4

080007f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f8:	d3f9      	bcc.n	80007ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fa:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007fc:	4c0b      	ldr	r4, [pc, #44]	; (800082c <LoopForever+0x16>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000800:	e001      	b.n	8000806 <LoopFillZerobss>

08000802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000804:	3204      	adds	r2, #4

08000806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000808:	d3fb      	bcc.n	8000802 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800080a:	f7ff ffe4 	bl	80007d6 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800080e:	f001 fd23 	bl	8002258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000812:	f7ff fdab 	bl	800036c <main>

08000816 <LoopForever>:

LoopForever:
    b LoopForever
 8000816:	e7fe      	b.n	8000816 <LoopForever>
  ldr   r0, =_estack
 8000818:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000820:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000824:	08002300 	.word	0x08002300
  ldr r2, =_sbss
 8000828:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800082c:	200000c8 	.word	0x200000c8

08000830 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000830:	e7fe      	b.n	8000830 <ADC1_IRQHandler>
	...

08000834 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <HAL_Init+0x24>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_Init+0x24>)
 800083e:	2110      	movs	r1, #16
 8000840:	430a      	orrs	r2, r1
 8000842:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000844:	2003      	movs	r0, #3
 8000846:	f000 f809 	bl	800085c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800084a:	f7ff ff89 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800084e:	2300      	movs	r3, #0
}
 8000850:	0018      	movs	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	40022000 	.word	0x40022000

0800085c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <HAL_InitTick+0x5c>)
 8000866:	681c      	ldr	r4, [r3, #0]
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <HAL_InitTick+0x60>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	0019      	movs	r1, r3
 800086e:	23fa      	movs	r3, #250	; 0xfa
 8000870:	0098      	lsls	r0, r3, #2
 8000872:	f7ff fc49 	bl	8000108 <__udivsi3>
 8000876:	0003      	movs	r3, r0
 8000878:	0019      	movs	r1, r3
 800087a:	0020      	movs	r0, r4
 800087c:	f7ff fc44 	bl	8000108 <__udivsi3>
 8000880:	0003      	movs	r3, r0
 8000882:	0018      	movs	r0, r3
 8000884:	f000 f905 	bl	8000a92 <HAL_SYSTICK_Config>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	e00f      	b.n	80008b0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b03      	cmp	r3, #3
 8000894:	d80b      	bhi.n	80008ae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	2301      	movs	r3, #1
 800089a:	425b      	negs	r3, r3
 800089c:	2200      	movs	r2, #0
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 f8e2 	bl	8000a68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_InitTick+0x64>)
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e000      	b.n	80008b0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b003      	add	sp, #12
 80008b6:	bd90      	pop	{r4, r7, pc}
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000004 	.word	0x20000004

080008c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <HAL_IncTick+0x1c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	001a      	movs	r2, r3
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_IncTick+0x20>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	18d2      	adds	r2, r2, r3
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <HAL_IncTick+0x20>)
 80008d6:	601a      	str	r2, [r3, #0]
}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	20000008 	.word	0x20000008
 80008e4:	200000c4 	.word	0x200000c4

080008e8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  return uwTick;
 80008ec:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <HAL_GetTick+0x10>)
 80008ee:	681b      	ldr	r3, [r3, #0]
}
 80008f0:	0018      	movs	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	200000c4 	.word	0x200000c4

080008fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000904:	f7ff fff0 	bl	80008e8 <HAL_GetTick>
 8000908:	0003      	movs	r3, r0
 800090a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3301      	adds	r3, #1
 8000914:	d005      	beq.n	8000922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_Delay+0x44>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	001a      	movs	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	189b      	adds	r3, r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	f7ff ffe0 	bl	80008e8 <HAL_GetTick>
 8000928:	0002      	movs	r2, r0
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	429a      	cmp	r2, r3
 8000932:	d8f7      	bhi.n	8000924 <HAL_Delay+0x28>
  {
  }
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b004      	add	sp, #16
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	20000008 	.word	0x20000008

08000944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	0002      	movs	r2, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b7f      	cmp	r3, #127	; 0x7f
 8000958:	d828      	bhi.n	80009ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800095a:	4a2f      	ldr	r2, [pc, #188]	; (8000a18 <__NVIC_SetPriority+0xd4>)
 800095c:	1dfb      	adds	r3, r7, #7
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b25b      	sxtb	r3, r3
 8000962:	089b      	lsrs	r3, r3, #2
 8000964:	33c0      	adds	r3, #192	; 0xc0
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	589b      	ldr	r3, [r3, r2]
 800096a:	1dfa      	adds	r2, r7, #7
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	0011      	movs	r1, r2
 8000970:	2203      	movs	r2, #3
 8000972:	400a      	ands	r2, r1
 8000974:	00d2      	lsls	r2, r2, #3
 8000976:	21ff      	movs	r1, #255	; 0xff
 8000978:	4091      	lsls	r1, r2
 800097a:	000a      	movs	r2, r1
 800097c:	43d2      	mvns	r2, r2
 800097e:	401a      	ands	r2, r3
 8000980:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	019b      	lsls	r3, r3, #6
 8000986:	22ff      	movs	r2, #255	; 0xff
 8000988:	401a      	ands	r2, r3
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	0018      	movs	r0, r3
 8000990:	2303      	movs	r3, #3
 8000992:	4003      	ands	r3, r0
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000998:	481f      	ldr	r0, [pc, #124]	; (8000a18 <__NVIC_SetPriority+0xd4>)
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b25b      	sxtb	r3, r3
 80009a0:	089b      	lsrs	r3, r3, #2
 80009a2:	430a      	orrs	r2, r1
 80009a4:	33c0      	adds	r3, #192	; 0xc0
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009aa:	e031      	b.n	8000a10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ac:	4a1b      	ldr	r2, [pc, #108]	; (8000a1c <__NVIC_SetPriority+0xd8>)
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	0019      	movs	r1, r3
 80009b4:	230f      	movs	r3, #15
 80009b6:	400b      	ands	r3, r1
 80009b8:	3b08      	subs	r3, #8
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	3306      	adds	r3, #6
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	18d3      	adds	r3, r2, r3
 80009c2:	3304      	adds	r3, #4
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	1dfa      	adds	r2, r7, #7
 80009c8:	7812      	ldrb	r2, [r2, #0]
 80009ca:	0011      	movs	r1, r2
 80009cc:	2203      	movs	r2, #3
 80009ce:	400a      	ands	r2, r1
 80009d0:	00d2      	lsls	r2, r2, #3
 80009d2:	21ff      	movs	r1, #255	; 0xff
 80009d4:	4091      	lsls	r1, r2
 80009d6:	000a      	movs	r2, r1
 80009d8:	43d2      	mvns	r2, r2
 80009da:	401a      	ands	r2, r3
 80009dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	019b      	lsls	r3, r3, #6
 80009e2:	22ff      	movs	r2, #255	; 0xff
 80009e4:	401a      	ands	r2, r3
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	0018      	movs	r0, r3
 80009ec:	2303      	movs	r3, #3
 80009ee:	4003      	ands	r3, r0
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f4:	4809      	ldr	r0, [pc, #36]	; (8000a1c <__NVIC_SetPriority+0xd8>)
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	001c      	movs	r4, r3
 80009fc:	230f      	movs	r3, #15
 80009fe:	4023      	ands	r3, r4
 8000a00:	3b08      	subs	r3, #8
 8000a02:	089b      	lsrs	r3, r3, #2
 8000a04:	430a      	orrs	r2, r1
 8000a06:	3306      	adds	r3, #6
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	18c3      	adds	r3, r0, r3
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	601a      	str	r2, [r3, #0]
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b003      	add	sp, #12
 8000a16:	bd90      	pop	{r4, r7, pc}
 8000a18:	e000e100 	.word	0xe000e100
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	1e5a      	subs	r2, r3, #1
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	045b      	lsls	r3, r3, #17
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d301      	bcc.n	8000a38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a34:	2301      	movs	r3, #1
 8000a36:	e010      	b.n	8000a5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <SysTick_Config+0x44>)
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	3a01      	subs	r2, #1
 8000a3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a40:	2301      	movs	r3, #1
 8000a42:	425b      	negs	r3, r3
 8000a44:	2103      	movs	r1, #3
 8000a46:	0018      	movs	r0, r3
 8000a48:	f7ff ff7c 	bl	8000944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <SysTick_Config+0x44>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <SysTick_Config+0x44>)
 8000a54:	2207      	movs	r2, #7
 8000a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b002      	add	sp, #8
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	e000e010 	.word	0xe000e010

08000a68 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	210f      	movs	r1, #15
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	1c02      	adds	r2, r0, #0
 8000a78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b25b      	sxtb	r3, r3
 8000a82:	0011      	movs	r1, r2
 8000a84:	0018      	movs	r0, r3
 8000a86:	f7ff ff5d 	bl	8000944 <__NVIC_SetPriority>
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b004      	add	sp, #16
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f7ff ffbf 	bl	8000a20 <SysTick_Config>
 8000aa2:	0003      	movs	r3, r0
}
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b002      	add	sp, #8
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aba:	e14f      	b.n	8000d5c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	4091      	lsls	r1, r2
 8000ac6:	000a      	movs	r2, r1
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d100      	bne.n	8000ad4 <HAL_GPIO_Init+0x28>
 8000ad2:	e140      	b.n	8000d56 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	2203      	movs	r2, #3
 8000ada:	4013      	ands	r3, r2
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d005      	beq.n	8000aec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d130      	bne.n	8000b4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	2203      	movs	r2, #3
 8000af8:	409a      	lsls	r2, r3
 8000afa:	0013      	movs	r3, r2
 8000afc:	43da      	mvns	r2, r3
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	68da      	ldr	r2, [r3, #12]
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	409a      	lsls	r2, r3
 8000b0e:	0013      	movs	r3, r2
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b22:	2201      	movs	r2, #1
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
 8000b28:	0013      	movs	r3, r2
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	091b      	lsrs	r3, r3, #4
 8000b38:	2201      	movs	r2, #1
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	0013      	movs	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	2203      	movs	r2, #3
 8000b54:	4013      	ands	r3, r2
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d017      	beq.n	8000b8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2203      	movs	r2, #3
 8000b66:	409a      	lsls	r2, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	409a      	lsls	r2, r3
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	2203      	movs	r2, #3
 8000b90:	4013      	ands	r3, r2
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d123      	bne.n	8000bde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	08da      	lsrs	r2, r3, #3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3208      	adds	r2, #8
 8000b9e:	0092      	lsls	r2, r2, #2
 8000ba0:	58d3      	ldr	r3, [r2, r3]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	2207      	movs	r2, #7
 8000ba8:	4013      	ands	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	220f      	movs	r2, #15
 8000bae:	409a      	lsls	r2, r3
 8000bb0:	0013      	movs	r3, r2
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	691a      	ldr	r2, [r3, #16]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	2107      	movs	r1, #7
 8000bc2:	400b      	ands	r3, r1
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	409a      	lsls	r2, r3
 8000bc8:	0013      	movs	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	08da      	lsrs	r2, r3, #3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3208      	adds	r2, #8
 8000bd8:	0092      	lsls	r2, r2, #2
 8000bda:	6939      	ldr	r1, [r7, #16]
 8000bdc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	2203      	movs	r2, #3
 8000bea:	409a      	lsls	r2, r3
 8000bec:	0013      	movs	r3, r2
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	409a      	lsls	r2, r3
 8000c04:	0013      	movs	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	23c0      	movs	r3, #192	; 0xc0
 8000c18:	029b      	lsls	r3, r3, #10
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	d100      	bne.n	8000c20 <HAL_GPIO_Init+0x174>
 8000c1e:	e09a      	b.n	8000d56 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c20:	4b54      	ldr	r3, [pc, #336]	; (8000d74 <HAL_GPIO_Init+0x2c8>)
 8000c22:	699a      	ldr	r2, [r3, #24]
 8000c24:	4b53      	ldr	r3, [pc, #332]	; (8000d74 <HAL_GPIO_Init+0x2c8>)
 8000c26:	2101      	movs	r1, #1
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	619a      	str	r2, [r3, #24]
 8000c2c:	4b51      	ldr	r3, [pc, #324]	; (8000d74 <HAL_GPIO_Init+0x2c8>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	2201      	movs	r2, #1
 8000c32:	4013      	ands	r3, r2
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c38:	4a4f      	ldr	r2, [pc, #316]	; (8000d78 <HAL_GPIO_Init+0x2cc>)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	3302      	adds	r3, #2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	589b      	ldr	r3, [r3, r2]
 8000c44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	2203      	movs	r2, #3
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	220f      	movs	r2, #15
 8000c50:	409a      	lsls	r2, r3
 8000c52:	0013      	movs	r3, r2
 8000c54:	43da      	mvns	r2, r3
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	2390      	movs	r3, #144	; 0x90
 8000c60:	05db      	lsls	r3, r3, #23
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d013      	beq.n	8000c8e <HAL_GPIO_Init+0x1e2>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a44      	ldr	r2, [pc, #272]	; (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d00d      	beq.n	8000c8a <HAL_GPIO_Init+0x1de>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a43      	ldr	r2, [pc, #268]	; (8000d80 <HAL_GPIO_Init+0x2d4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d007      	beq.n	8000c86 <HAL_GPIO_Init+0x1da>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a42      	ldr	r2, [pc, #264]	; (8000d84 <HAL_GPIO_Init+0x2d8>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d101      	bne.n	8000c82 <HAL_GPIO_Init+0x1d6>
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e006      	b.n	8000c90 <HAL_GPIO_Init+0x1e4>
 8000c82:	2305      	movs	r3, #5
 8000c84:	e004      	b.n	8000c90 <HAL_GPIO_Init+0x1e4>
 8000c86:	2302      	movs	r3, #2
 8000c88:	e002      	b.n	8000c90 <HAL_GPIO_Init+0x1e4>
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e000      	b.n	8000c90 <HAL_GPIO_Init+0x1e4>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	697a      	ldr	r2, [r7, #20]
 8000c92:	2103      	movs	r1, #3
 8000c94:	400a      	ands	r2, r1
 8000c96:	0092      	lsls	r2, r2, #2
 8000c98:	4093      	lsls	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ca0:	4935      	ldr	r1, [pc, #212]	; (8000d78 <HAL_GPIO_Init+0x2cc>)
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	089b      	lsrs	r3, r3, #2
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cae:	4b36      	ldr	r3, [pc, #216]	; (8000d88 <HAL_GPIO_Init+0x2dc>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	2380      	movs	r3, #128	; 0x80
 8000cc4:	025b      	lsls	r3, r3, #9
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	d003      	beq.n	8000cd2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <HAL_GPIO_Init+0x2dc>)
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <HAL_GPIO_Init+0x2dc>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	43da      	mvns	r2, r3
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	029b      	lsls	r3, r3, #10
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	d003      	beq.n	8000cfc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <HAL_GPIO_Init+0x2dc>)
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <HAL_GPIO_Init+0x2dc>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	2380      	movs	r3, #128	; 0x80
 8000d18:	035b      	lsls	r3, r3, #13
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <HAL_GPIO_Init+0x2dc>)
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <HAL_GPIO_Init+0x2dc>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	43da      	mvns	r2, r3
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	039b      	lsls	r3, r3, #14
 8000d44:	4013      	ands	r3, r2
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d50:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <HAL_GPIO_Init+0x2dc>)
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	40da      	lsrs	r2, r3
 8000d64:	1e13      	subs	r3, r2, #0
 8000d66:	d000      	beq.n	8000d6a <HAL_GPIO_Init+0x2be>
 8000d68:	e6a8      	b.n	8000abc <HAL_GPIO_Init+0x10>
  } 
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46c0      	nop			; (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b006      	add	sp, #24
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010000 	.word	0x40010000
 8000d7c:	48000400 	.word	0x48000400
 8000d80:	48000800 	.word	0x48000800
 8000d84:	48000c00 	.word	0x48000c00
 8000d88:	40010400 	.word	0x40010400

08000d8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e082      	b.n	8000ea4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2241      	movs	r2, #65	; 0x41
 8000da2:	5c9b      	ldrb	r3, [r3, r2]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d107      	bne.n	8000dba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2240      	movs	r2, #64	; 0x40
 8000dae:	2100      	movs	r1, #0
 8000db0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff fa8b 	bl	80002d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2241      	movs	r2, #65	; 0x41
 8000dbe:	2124      	movs	r1, #36	; 0x24
 8000dc0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	438a      	bics	r2, r1
 8000dd0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4934      	ldr	r1, [pc, #208]	; (8000eac <HAL_I2C_Init+0x120>)
 8000ddc:	400a      	ands	r2, r1
 8000dde:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4931      	ldr	r1, [pc, #196]	; (8000eb0 <HAL_I2C_Init+0x124>)
 8000dec:	400a      	ands	r2, r1
 8000dee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d108      	bne.n	8000e0a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	0209      	lsls	r1, r1, #8
 8000e04:	430a      	orrs	r2, r1
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	e007      	b.n	8000e1a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2184      	movs	r1, #132	; 0x84
 8000e14:	0209      	lsls	r1, r1, #8
 8000e16:	430a      	orrs	r2, r1
 8000e18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d104      	bne.n	8000e2c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2280      	movs	r2, #128	; 0x80
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	491f      	ldr	r1, [pc, #124]	; (8000eb4 <HAL_I2C_Init+0x128>)
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	491a      	ldr	r1, [pc, #104]	; (8000eb0 <HAL_I2C_Init+0x124>)
 8000e48:	400a      	ands	r2, r1
 8000e4a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	691a      	ldr	r2, [r3, #16]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	695b      	ldr	r3, [r3, #20]
 8000e54:	431a      	orrs	r2, r3
 8000e56:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	430a      	orrs	r2, r1
 8000e64:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69d9      	ldr	r1, [r3, #28]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a1a      	ldr	r2, [r3, #32]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	430a      	orrs	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2101      	movs	r1, #1
 8000e82:	430a      	orrs	r2, r1
 8000e84:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2241      	movs	r2, #65	; 0x41
 8000e90:	2120      	movs	r1, #32
 8000e92:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2242      	movs	r2, #66	; 0x42
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b002      	add	sp, #8
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	f0ffffff 	.word	0xf0ffffff
 8000eb0:	ffff7fff 	.word	0xffff7fff
 8000eb4:	02008000 	.word	0x02008000

08000eb8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	0008      	movs	r0, r1
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	1c02      	adds	r2, r0, #0
 8000ecc:	801a      	strh	r2, [r3, #0]
 8000ece:	2308      	movs	r3, #8
 8000ed0:	18fb      	adds	r3, r7, r3
 8000ed2:	1c0a      	adds	r2, r1, #0
 8000ed4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2241      	movs	r2, #65	; 0x41
 8000eda:	5c9b      	ldrb	r3, [r3, r2]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b20      	cmp	r3, #32
 8000ee0:	d000      	beq.n	8000ee4 <HAL_I2C_Master_Transmit+0x2c>
 8000ee2:	e0e7      	b.n	80010b4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2240      	movs	r2, #64	; 0x40
 8000ee8:	5c9b      	ldrb	r3, [r3, r2]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d101      	bne.n	8000ef2 <HAL_I2C_Master_Transmit+0x3a>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	e0e1      	b.n	80010b6 <HAL_I2C_Master_Transmit+0x1fe>
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2240      	movs	r2, #64	; 0x40
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000efa:	f7ff fcf5 	bl	80008e8 <HAL_GetTick>
 8000efe:	0003      	movs	r3, r0
 8000f00:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	0219      	lsls	r1, r3, #8
 8000f06:	68f8      	ldr	r0, [r7, #12]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2319      	movs	r3, #25
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f000 fa04 	bl	800131c <I2C_WaitOnFlagUntilTimeout>
 8000f14:	1e03      	subs	r3, r0, #0
 8000f16:	d001      	beq.n	8000f1c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e0cc      	b.n	80010b6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2241      	movs	r2, #65	; 0x41
 8000f20:	2121      	movs	r1, #33	; 0x21
 8000f22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2242      	movs	r2, #66	; 0x42
 8000f28:	2110      	movs	r1, #16
 8000f2a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2208      	movs	r2, #8
 8000f3c:	18ba      	adds	r2, r7, r2
 8000f3e:	8812      	ldrh	r2, [r2, #0]
 8000f40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2200      	movs	r2, #0
 8000f46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	2bff      	cmp	r3, #255	; 0xff
 8000f50:	d911      	bls.n	8000f76 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	22ff      	movs	r2, #255	; 0xff
 8000f56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	045c      	lsls	r4, r3, #17
 8000f62:	230a      	movs	r3, #10
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	8819      	ldrh	r1, [r3, #0]
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	4b55      	ldr	r3, [pc, #340]	; (80010c0 <HAL_I2C_Master_Transmit+0x208>)
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	0023      	movs	r3, r4
 8000f70:	f000 fb74 	bl	800165c <I2C_TransferConfig>
 8000f74:	e075      	b.n	8001062 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	049c      	lsls	r4, r3, #18
 8000f8a:	230a      	movs	r3, #10
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	8819      	ldrh	r1, [r3, #0]
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	4b4b      	ldr	r3, [pc, #300]	; (80010c0 <HAL_I2C_Master_Transmit+0x208>)
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	0023      	movs	r3, r4
 8000f98:	f000 fb60 	bl	800165c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000f9c:	e061      	b.n	8001062 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f000 f9f8 	bl	800139a <I2C_WaitOnTXISFlagUntilTimeout>
 8000faa:	1e03      	subs	r3, r0, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e081      	b.n	80010b6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d03a      	beq.n	8001062 <HAL_I2C_Master_Transmit+0x1aa>
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d136      	bne.n	8001062 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	2200      	movs	r2, #0
 8001000:	2180      	movs	r1, #128	; 0x80
 8001002:	f000 f98b 	bl	800131c <I2C_WaitOnFlagUntilTimeout>
 8001006:	1e03      	subs	r3, r0, #0
 8001008:	d001      	beq.n	800100e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e053      	b.n	80010b6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001012:	b29b      	uxth	r3, r3
 8001014:	2bff      	cmp	r3, #255	; 0xff
 8001016:	d911      	bls.n	800103c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	22ff      	movs	r2, #255	; 0xff
 800101c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001022:	b2da      	uxtb	r2, r3
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	045c      	lsls	r4, r3, #17
 8001028:	230a      	movs	r3, #10
 800102a:	18fb      	adds	r3, r7, r3
 800102c:	8819      	ldrh	r1, [r3, #0]
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	2300      	movs	r3, #0
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	0023      	movs	r3, r4
 8001036:	f000 fb11 	bl	800165c <I2C_TransferConfig>
 800103a:	e012      	b.n	8001062 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001040:	b29a      	uxth	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800104a:	b2da      	uxtb	r2, r3
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	049c      	lsls	r4, r3, #18
 8001050:	230a      	movs	r3, #10
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	8819      	ldrh	r1, [r3, #0]
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	2300      	movs	r3, #0
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	0023      	movs	r3, r4
 800105e:	f000 fafd 	bl	800165c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001066:	b29b      	uxth	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d198      	bne.n	8000f9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	0018      	movs	r0, r3
 8001074:	f000 f9d0 	bl	8001418 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001078:	1e03      	subs	r3, r0, #0
 800107a:	d001      	beq.n	8001080 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e01a      	b.n	80010b6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2220      	movs	r2, #32
 8001086:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	490c      	ldr	r1, [pc, #48]	; (80010c4 <HAL_I2C_Master_Transmit+0x20c>)
 8001094:	400a      	ands	r2, r1
 8001096:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2241      	movs	r2, #65	; 0x41
 800109c:	2120      	movs	r1, #32
 800109e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2242      	movs	r2, #66	; 0x42
 80010a4:	2100      	movs	r1, #0
 80010a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2240      	movs	r2, #64	; 0x40
 80010ac:	2100      	movs	r1, #0
 80010ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	e000      	b.n	80010b6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80010b4:	2302      	movs	r3, #2
  }
}
 80010b6:	0018      	movs	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b007      	add	sp, #28
 80010bc:	bd90      	pop	{r4, r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	80002000 	.word	0x80002000
 80010c4:	fe00e800 	.word	0xfe00e800

080010c8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	0008      	movs	r0, r1
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	0019      	movs	r1, r3
 80010d6:	230a      	movs	r3, #10
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	1c02      	adds	r2, r0, #0
 80010dc:	801a      	strh	r2, [r3, #0]
 80010de:	2308      	movs	r3, #8
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	1c0a      	adds	r2, r1, #0
 80010e4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2241      	movs	r2, #65	; 0x41
 80010ea:	5c9b      	ldrb	r3, [r3, r2]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b20      	cmp	r3, #32
 80010f0:	d000      	beq.n	80010f4 <HAL_I2C_Master_Receive+0x2c>
 80010f2:	e0e8      	b.n	80012c6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2240      	movs	r2, #64	; 0x40
 80010f8:	5c9b      	ldrb	r3, [r3, r2]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_I2C_Master_Receive+0x3a>
 80010fe:	2302      	movs	r3, #2
 8001100:	e0e2      	b.n	80012c8 <HAL_I2C_Master_Receive+0x200>
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2240      	movs	r2, #64	; 0x40
 8001106:	2101      	movs	r1, #1
 8001108:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800110a:	f7ff fbed 	bl	80008e8 <HAL_GetTick>
 800110e:	0003      	movs	r3, r0
 8001110:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	0219      	lsls	r1, r3, #8
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2319      	movs	r3, #25
 800111e:	2201      	movs	r2, #1
 8001120:	f000 f8fc 	bl	800131c <I2C_WaitOnFlagUntilTimeout>
 8001124:	1e03      	subs	r3, r0, #0
 8001126:	d001      	beq.n	800112c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e0cd      	b.n	80012c8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2241      	movs	r2, #65	; 0x41
 8001130:	2122      	movs	r1, #34	; 0x22
 8001132:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2242      	movs	r2, #66	; 0x42
 8001138:	2110      	movs	r1, #16
 800113a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2200      	movs	r2, #0
 8001140:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2208      	movs	r2, #8
 800114c:	18ba      	adds	r2, r7, r2
 800114e:	8812      	ldrh	r2, [r2, #0]
 8001150:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2200      	movs	r2, #0
 8001156:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800115c:	b29b      	uxth	r3, r3
 800115e:	2bff      	cmp	r3, #255	; 0xff
 8001160:	d911      	bls.n	8001186 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	22ff      	movs	r2, #255	; 0xff
 8001166:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800116c:	b2da      	uxtb	r2, r3
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	045c      	lsls	r4, r3, #17
 8001172:	230a      	movs	r3, #10
 8001174:	18fb      	adds	r3, r7, r3
 8001176:	8819      	ldrh	r1, [r3, #0]
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	4b55      	ldr	r3, [pc, #340]	; (80012d0 <HAL_I2C_Master_Receive+0x208>)
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	0023      	movs	r3, r4
 8001180:	f000 fa6c 	bl	800165c <I2C_TransferConfig>
 8001184:	e076      	b.n	8001274 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800118a:	b29a      	uxth	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001194:	b2da      	uxtb	r2, r3
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	049c      	lsls	r4, r3, #18
 800119a:	230a      	movs	r3, #10
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	8819      	ldrh	r1, [r3, #0]
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	4b4b      	ldr	r3, [pc, #300]	; (80012d0 <HAL_I2C_Master_Receive+0x208>)
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	0023      	movs	r3, r4
 80011a8:	f000 fa58 	bl	800165c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80011ac:	e062      	b.n	8001274 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	0018      	movs	r0, r3
 80011b6:	f000 f96b 	bl	8001490 <I2C_WaitOnRXNEFlagUntilTimeout>
 80011ba:	1e03      	subs	r3, r0, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e082      	b.n	80012c8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011de:	3b01      	subs	r3, #1
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	3b01      	subs	r3, #1
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d03a      	beq.n	8001274 <HAL_I2C_Master_Receive+0x1ac>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001202:	2b00      	cmp	r3, #0
 8001204:	d136      	bne.n	8001274 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	0013      	movs	r3, r2
 8001210:	2200      	movs	r2, #0
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	f000 f882 	bl	800131c <I2C_WaitOnFlagUntilTimeout>
 8001218:	1e03      	subs	r3, r0, #0
 800121a:	d001      	beq.n	8001220 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e053      	b.n	80012c8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001224:	b29b      	uxth	r3, r3
 8001226:	2bff      	cmp	r3, #255	; 0xff
 8001228:	d911      	bls.n	800124e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	22ff      	movs	r2, #255	; 0xff
 800122e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001234:	b2da      	uxtb	r2, r3
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	045c      	lsls	r4, r3, #17
 800123a:	230a      	movs	r3, #10
 800123c:	18fb      	adds	r3, r7, r3
 800123e:	8819      	ldrh	r1, [r3, #0]
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	2300      	movs	r3, #0
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	0023      	movs	r3, r4
 8001248:	f000 fa08 	bl	800165c <I2C_TransferConfig>
 800124c:	e012      	b.n	8001274 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001252:	b29a      	uxth	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800125c:	b2da      	uxtb	r2, r3
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	049c      	lsls	r4, r3, #18
 8001262:	230a      	movs	r3, #10
 8001264:	18fb      	adds	r3, r7, r3
 8001266:	8819      	ldrh	r1, [r3, #0]
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	2300      	movs	r3, #0
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	0023      	movs	r3, r4
 8001270:	f000 f9f4 	bl	800165c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001278:	b29b      	uxth	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d197      	bne.n	80011ae <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	0018      	movs	r0, r3
 8001286:	f000 f8c7 	bl	8001418 <I2C_WaitOnSTOPFlagUntilTimeout>
 800128a:	1e03      	subs	r3, r0, #0
 800128c:	d001      	beq.n	8001292 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e01a      	b.n	80012c8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2220      	movs	r2, #32
 8001298:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	490b      	ldr	r1, [pc, #44]	; (80012d4 <HAL_I2C_Master_Receive+0x20c>)
 80012a6:	400a      	ands	r2, r1
 80012a8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2241      	movs	r2, #65	; 0x41
 80012ae:	2120      	movs	r1, #32
 80012b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2242      	movs	r2, #66	; 0x42
 80012b6:	2100      	movs	r1, #0
 80012b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2240      	movs	r2, #64	; 0x40
 80012be:	2100      	movs	r1, #0
 80012c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80012c6:	2302      	movs	r3, #2
  }
}
 80012c8:	0018      	movs	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b007      	add	sp, #28
 80012ce:	bd90      	pop	{r4, r7, pc}
 80012d0:	80002400 	.word	0x80002400
 80012d4:	fe00e800 	.word	0xfe00e800

080012d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	2202      	movs	r2, #2
 80012e8:	4013      	ands	r3, r2
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d103      	bne.n	80012f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2200      	movs	r2, #0
 80012f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	2201      	movs	r2, #1
 80012fe:	4013      	ands	r3, r2
 8001300:	2b01      	cmp	r3, #1
 8001302:	d007      	beq.n	8001314 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	699a      	ldr	r2, [r3, #24]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2101      	movs	r1, #1
 8001310:	430a      	orrs	r2, r1
 8001312:	619a      	str	r2, [r3, #24]
  }
}
 8001314:	46c0      	nop			; (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	b002      	add	sp, #8
 800131a:	bd80      	pop	{r7, pc}

0800131c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	1dfb      	adds	r3, r7, #7
 800132a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800132c:	e021      	b.n	8001372 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	d01e      	beq.n	8001372 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001334:	f7ff fad8 	bl	80008e8 <HAL_GetTick>
 8001338:	0002      	movs	r2, r0
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d302      	bcc.n	800134a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d113      	bne.n	8001372 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	2220      	movs	r2, #32
 8001350:	431a      	orrs	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2241      	movs	r2, #65	; 0x41
 800135a:	2120      	movs	r1, #32
 800135c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2242      	movs	r2, #66	; 0x42
 8001362:	2100      	movs	r1, #0
 8001364:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2240      	movs	r2, #64	; 0x40
 800136a:	2100      	movs	r1, #0
 800136c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00f      	b.n	8001392 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	4013      	ands	r3, r2
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	425a      	negs	r2, r3
 8001382:	4153      	adcs	r3, r2
 8001384:	b2db      	uxtb	r3, r3
 8001386:	001a      	movs	r2, r3
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	d0ce      	beq.n	800132e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	0018      	movs	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	b004      	add	sp, #16
 8001398:	bd80      	pop	{r7, pc}

0800139a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80013a6:	e02b      	b.n	8001400 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	68b9      	ldr	r1, [r7, #8]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	0018      	movs	r0, r3
 80013b0:	f000 f8da 	bl	8001568 <I2C_IsAcknowledgeFailed>
 80013b4:	1e03      	subs	r3, r0, #0
 80013b6:	d001      	beq.n	80013bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e029      	b.n	8001410 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	3301      	adds	r3, #1
 80013c0:	d01e      	beq.n	8001400 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013c2:	f7ff fa91 	bl	80008e8 <HAL_GetTick>
 80013c6:	0002      	movs	r2, r0
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d302      	bcc.n	80013d8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d113      	bne.n	8001400 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013dc:	2220      	movs	r2, #32
 80013de:	431a      	orrs	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2241      	movs	r2, #65	; 0x41
 80013e8:	2120      	movs	r1, #32
 80013ea:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2242      	movs	r2, #66	; 0x42
 80013f0:	2100      	movs	r1, #0
 80013f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2240      	movs	r2, #64	; 0x40
 80013f8:	2100      	movs	r1, #0
 80013fa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e007      	b.n	8001410 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	2202      	movs	r2, #2
 8001408:	4013      	ands	r3, r2
 800140a:	2b02      	cmp	r3, #2
 800140c:	d1cc      	bne.n	80013a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	0018      	movs	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	b004      	add	sp, #16
 8001416:	bd80      	pop	{r7, pc}

08001418 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001424:	e028      	b.n	8001478 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	0018      	movs	r0, r3
 800142e:	f000 f89b 	bl	8001568 <I2C_IsAcknowledgeFailed>
 8001432:	1e03      	subs	r3, r0, #0
 8001434:	d001      	beq.n	800143a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e026      	b.n	8001488 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800143a:	f7ff fa55 	bl	80008e8 <HAL_GetTick>
 800143e:	0002      	movs	r2, r0
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	429a      	cmp	r2, r3
 8001448:	d302      	bcc.n	8001450 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d113      	bne.n	8001478 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001454:	2220      	movs	r2, #32
 8001456:	431a      	orrs	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2241      	movs	r2, #65	; 0x41
 8001460:	2120      	movs	r1, #32
 8001462:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2242      	movs	r2, #66	; 0x42
 8001468:	2100      	movs	r1, #0
 800146a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2240      	movs	r2, #64	; 0x40
 8001470:	2100      	movs	r1, #0
 8001472:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e007      	b.n	8001488 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	2220      	movs	r2, #32
 8001480:	4013      	ands	r3, r2
 8001482:	2b20      	cmp	r3, #32
 8001484:	d1cf      	bne.n	8001426 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	0018      	movs	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	b004      	add	sp, #16
 800148e:	bd80      	pop	{r7, pc}

08001490 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800149c:	e055      	b.n	800154a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	0018      	movs	r0, r3
 80014a6:	f000 f85f 	bl	8001568 <I2C_IsAcknowledgeFailed>
 80014aa:	1e03      	subs	r3, r0, #0
 80014ac:	d001      	beq.n	80014b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e053      	b.n	800155a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	2220      	movs	r2, #32
 80014ba:	4013      	ands	r3, r2
 80014bc:	2b20      	cmp	r3, #32
 80014be:	d129      	bne.n	8001514 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	2204      	movs	r2, #4
 80014c8:	4013      	ands	r3, r2
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d105      	bne.n	80014da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e03f      	b.n	800155a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2220      	movs	r2, #32
 80014e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	491d      	ldr	r1, [pc, #116]	; (8001564 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80014ee:	400a      	ands	r2, r1
 80014f0:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2200      	movs	r2, #0
 80014f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2241      	movs	r2, #65	; 0x41
 80014fc:	2120      	movs	r1, #32
 80014fe:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2242      	movs	r2, #66	; 0x42
 8001504:	2100      	movs	r1, #0
 8001506:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2240      	movs	r2, #64	; 0x40
 800150c:	2100      	movs	r1, #0
 800150e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e022      	b.n	800155a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001514:	f7ff f9e8 	bl	80008e8 <HAL_GetTick>
 8001518:	0002      	movs	r2, r0
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	429a      	cmp	r2, r3
 8001522:	d302      	bcc.n	800152a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10f      	bne.n	800154a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	2220      	movs	r2, #32
 8001530:	431a      	orrs	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2241      	movs	r2, #65	; 0x41
 800153a:	2120      	movs	r1, #32
 800153c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2240      	movs	r2, #64	; 0x40
 8001542:	2100      	movs	r1, #0
 8001544:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e007      	b.n	800155a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	2204      	movs	r2, #4
 8001552:	4013      	ands	r3, r2
 8001554:	2b04      	cmp	r3, #4
 8001556:	d1a2      	bne.n	800149e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	0018      	movs	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	b004      	add	sp, #16
 8001560:	bd80      	pop	{r7, pc}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	fe00e800 	.word	0xfe00e800

08001568 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	2210      	movs	r2, #16
 800157c:	4013      	ands	r3, r2
 800157e:	2b10      	cmp	r3, #16
 8001580:	d164      	bne.n	800164c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	049b      	lsls	r3, r3, #18
 800158c:	401a      	ands	r2, r3
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	049b      	lsls	r3, r3, #18
 8001592:	429a      	cmp	r2, r3
 8001594:	d02b      	beq.n	80015ee <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2180      	movs	r1, #128	; 0x80
 80015a2:	01c9      	lsls	r1, r1, #7
 80015a4:	430a      	orrs	r2, r1
 80015a6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015a8:	e021      	b.n	80015ee <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3301      	adds	r3, #1
 80015ae:	d01e      	beq.n	80015ee <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015b0:	f7ff f99a 	bl	80008e8 <HAL_GetTick>
 80015b4:	0002      	movs	r2, r0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d302      	bcc.n	80015c6 <I2C_IsAcknowledgeFailed+0x5e>
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d113      	bne.n	80015ee <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	2220      	movs	r2, #32
 80015cc:	431a      	orrs	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2241      	movs	r2, #65	; 0x41
 80015d6:	2120      	movs	r1, #32
 80015d8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2242      	movs	r2, #66	; 0x42
 80015de:	2100      	movs	r1, #0
 80015e0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2240      	movs	r2, #64	; 0x40
 80015e6:	2100      	movs	r1, #0
 80015e8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e02f      	b.n	800164e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2220      	movs	r2, #32
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b20      	cmp	r3, #32
 80015fa:	d1d6      	bne.n	80015aa <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2210      	movs	r2, #16
 8001602:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2220      	movs	r2, #32
 800160a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	0018      	movs	r0, r3
 8001610:	f7ff fe62 	bl	80012d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	490e      	ldr	r1, [pc, #56]	; (8001658 <I2C_IsAcknowledgeFailed+0xf0>)
 8001620:	400a      	ands	r2, r1
 8001622:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	2204      	movs	r2, #4
 800162a:	431a      	orrs	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2241      	movs	r2, #65	; 0x41
 8001634:	2120      	movs	r1, #32
 8001636:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2242      	movs	r2, #66	; 0x42
 800163c:	2100      	movs	r1, #0
 800163e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2240      	movs	r2, #64	; 0x40
 8001644:	2100      	movs	r1, #0
 8001646:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	0018      	movs	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	b004      	add	sp, #16
 8001654:	bd80      	pop	{r7, pc}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	fe00e800 	.word	0xfe00e800

0800165c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	0008      	movs	r0, r1
 8001666:	0011      	movs	r1, r2
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	240a      	movs	r4, #10
 800166c:	193b      	adds	r3, r7, r4
 800166e:	1c02      	adds	r2, r0, #0
 8001670:	801a      	strh	r2, [r3, #0]
 8001672:	2009      	movs	r0, #9
 8001674:	183b      	adds	r3, r7, r0
 8001676:	1c0a      	adds	r2, r1, #0
 8001678:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	6a3a      	ldr	r2, [r7, #32]
 8001682:	0d51      	lsrs	r1, r2, #21
 8001684:	2280      	movs	r2, #128	; 0x80
 8001686:	00d2      	lsls	r2, r2, #3
 8001688:	400a      	ands	r2, r1
 800168a:	490e      	ldr	r1, [pc, #56]	; (80016c4 <I2C_TransferConfig+0x68>)
 800168c:	430a      	orrs	r2, r1
 800168e:	43d2      	mvns	r2, r2
 8001690:	401a      	ands	r2, r3
 8001692:	0011      	movs	r1, r2
 8001694:	193b      	adds	r3, r7, r4
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	059b      	lsls	r3, r3, #22
 800169a:	0d9a      	lsrs	r2, r3, #22
 800169c:	183b      	adds	r3, r7, r0
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	0418      	lsls	r0, r3, #16
 80016a2:	23ff      	movs	r3, #255	; 0xff
 80016a4:	041b      	lsls	r3, r3, #16
 80016a6:	4003      	ands	r3, r0
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	431a      	orrs	r2, r3
 80016ae:	6a3b      	ldr	r3, [r7, #32]
 80016b0:	431a      	orrs	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	b005      	add	sp, #20
 80016c0:	bd90      	pop	{r4, r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	03ff63ff 	.word	0x03ff63ff

080016c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2241      	movs	r2, #65	; 0x41
 80016d6:	5c9b      	ldrb	r3, [r3, r2]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b20      	cmp	r3, #32
 80016dc:	d138      	bne.n	8001750 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2240      	movs	r2, #64	; 0x40
 80016e2:	5c9b      	ldrb	r3, [r3, r2]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e032      	b.n	8001752 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2240      	movs	r2, #64	; 0x40
 80016f0:	2101      	movs	r1, #1
 80016f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2241      	movs	r2, #65	; 0x41
 80016f8:	2124      	movs	r1, #36	; 0x24
 80016fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2101      	movs	r1, #1
 8001708:	438a      	bics	r2, r1
 800170a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4911      	ldr	r1, [pc, #68]	; (800175c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001718:	400a      	ands	r2, r1
 800171a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6819      	ldr	r1, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2101      	movs	r1, #1
 8001738:	430a      	orrs	r2, r1
 800173a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2241      	movs	r2, #65	; 0x41
 8001740:	2120      	movs	r1, #32
 8001742:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2240      	movs	r2, #64	; 0x40
 8001748:	2100      	movs	r1, #0
 800174a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	e000      	b.n	8001752 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001750:	2302      	movs	r3, #2
  }
}
 8001752:	0018      	movs	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	ffffefff 	.word	0xffffefff

08001760 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2241      	movs	r2, #65	; 0x41
 800176e:	5c9b      	ldrb	r3, [r3, r2]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b20      	cmp	r3, #32
 8001774:	d139      	bne.n	80017ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2240      	movs	r2, #64	; 0x40
 800177a:	5c9b      	ldrb	r3, [r3, r2]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001780:	2302      	movs	r3, #2
 8001782:	e033      	b.n	80017ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2240      	movs	r2, #64	; 0x40
 8001788:	2101      	movs	r1, #1
 800178a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2241      	movs	r2, #65	; 0x41
 8001790:	2124      	movs	r1, #36	; 0x24
 8001792:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2101      	movs	r1, #1
 80017a0:	438a      	bics	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2101      	movs	r1, #1
 80017d2:	430a      	orrs	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2241      	movs	r2, #65	; 0x41
 80017da:	2120      	movs	r1, #32
 80017dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2240      	movs	r2, #64	; 0x40
 80017e2:	2100      	movs	r1, #0
 80017e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e000      	b.n	80017ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017ea:	2302      	movs	r3, #2
  }
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b004      	add	sp, #16
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	fffff0ff 	.word	0xfffff0ff

080017f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e305      	b.n	8001e16 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2201      	movs	r2, #1
 8001810:	4013      	ands	r3, r2
 8001812:	d100      	bne.n	8001816 <HAL_RCC_OscConfig+0x1e>
 8001814:	e08d      	b.n	8001932 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001816:	4bc5      	ldr	r3, [pc, #788]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	220c      	movs	r2, #12
 800181c:	4013      	ands	r3, r2
 800181e:	2b04      	cmp	r3, #4
 8001820:	d00e      	beq.n	8001840 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001822:	4bc2      	ldr	r3, [pc, #776]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	220c      	movs	r2, #12
 8001828:	4013      	ands	r3, r2
 800182a:	2b08      	cmp	r3, #8
 800182c:	d116      	bne.n	800185c <HAL_RCC_OscConfig+0x64>
 800182e:	4bbf      	ldr	r3, [pc, #764]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	23c0      	movs	r3, #192	; 0xc0
 8001834:	025b      	lsls	r3, r3, #9
 8001836:	401a      	ands	r2, r3
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	025b      	lsls	r3, r3, #9
 800183c:	429a      	cmp	r2, r3
 800183e:	d10d      	bne.n	800185c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001840:	4bba      	ldr	r3, [pc, #744]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	029b      	lsls	r3, r3, #10
 8001848:	4013      	ands	r3, r2
 800184a:	d100      	bne.n	800184e <HAL_RCC_OscConfig+0x56>
 800184c:	e070      	b.n	8001930 <HAL_RCC_OscConfig+0x138>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d000      	beq.n	8001858 <HAL_RCC_OscConfig+0x60>
 8001856:	e06b      	b.n	8001930 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e2dc      	b.n	8001e16 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d107      	bne.n	8001874 <HAL_RCC_OscConfig+0x7c>
 8001864:	4bb1      	ldr	r3, [pc, #708]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4bb0      	ldr	r3, [pc, #704]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 800186a:	2180      	movs	r1, #128	; 0x80
 800186c:	0249      	lsls	r1, r1, #9
 800186e:	430a      	orrs	r2, r1
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	e02f      	b.n	80018d4 <HAL_RCC_OscConfig+0xdc>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10c      	bne.n	8001896 <HAL_RCC_OscConfig+0x9e>
 800187c:	4bab      	ldr	r3, [pc, #684]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4baa      	ldr	r3, [pc, #680]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001882:	49ab      	ldr	r1, [pc, #684]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 8001884:	400a      	ands	r2, r1
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	4ba8      	ldr	r3, [pc, #672]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4ba7      	ldr	r3, [pc, #668]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 800188e:	49a9      	ldr	r1, [pc, #676]	; (8001b34 <HAL_RCC_OscConfig+0x33c>)
 8001890:	400a      	ands	r2, r1
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e01e      	b.n	80018d4 <HAL_RCC_OscConfig+0xdc>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b05      	cmp	r3, #5
 800189c:	d10e      	bne.n	80018bc <HAL_RCC_OscConfig+0xc4>
 800189e:	4ba3      	ldr	r3, [pc, #652]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4ba2      	ldr	r3, [pc, #648]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 80018a4:	2180      	movs	r1, #128	; 0x80
 80018a6:	02c9      	lsls	r1, r1, #11
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	4b9f      	ldr	r3, [pc, #636]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b9e      	ldr	r3, [pc, #632]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 80018b2:	2180      	movs	r1, #128	; 0x80
 80018b4:	0249      	lsls	r1, r1, #9
 80018b6:	430a      	orrs	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	e00b      	b.n	80018d4 <HAL_RCC_OscConfig+0xdc>
 80018bc:	4b9b      	ldr	r3, [pc, #620]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b9a      	ldr	r3, [pc, #616]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 80018c2:	499b      	ldr	r1, [pc, #620]	; (8001b30 <HAL_RCC_OscConfig+0x338>)
 80018c4:	400a      	ands	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	4b98      	ldr	r3, [pc, #608]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b97      	ldr	r3, [pc, #604]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 80018ce:	4999      	ldr	r1, [pc, #612]	; (8001b34 <HAL_RCC_OscConfig+0x33c>)
 80018d0:	400a      	ands	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d014      	beq.n	8001906 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff f804 	bl	80008e8 <HAL_GetTick>
 80018e0:	0003      	movs	r3, r0
 80018e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e6:	f7fe ffff 	bl	80008e8 <HAL_GetTick>
 80018ea:	0002      	movs	r2, r0
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b64      	cmp	r3, #100	; 0x64
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e28e      	b.n	8001e16 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f8:	4b8c      	ldr	r3, [pc, #560]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	029b      	lsls	r3, r3, #10
 8001900:	4013      	ands	r3, r2
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0xee>
 8001904:	e015      	b.n	8001932 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7fe ffef 	bl	80008e8 <HAL_GetTick>
 800190a:	0003      	movs	r3, r0
 800190c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001910:	f7fe ffea 	bl	80008e8 <HAL_GetTick>
 8001914:	0002      	movs	r2, r0
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e279      	b.n	8001e16 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001922:	4b82      	ldr	r3, [pc, #520]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	029b      	lsls	r3, r3, #10
 800192a:	4013      	ands	r3, r2
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x118>
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2202      	movs	r2, #2
 8001938:	4013      	ands	r3, r2
 800193a:	d100      	bne.n	800193e <HAL_RCC_OscConfig+0x146>
 800193c:	e06c      	b.n	8001a18 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800193e:	4b7b      	ldr	r3, [pc, #492]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	220c      	movs	r2, #12
 8001944:	4013      	ands	r3, r2
 8001946:	d00e      	beq.n	8001966 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001948:	4b78      	ldr	r3, [pc, #480]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	220c      	movs	r2, #12
 800194e:	4013      	ands	r3, r2
 8001950:	2b08      	cmp	r3, #8
 8001952:	d11f      	bne.n	8001994 <HAL_RCC_OscConfig+0x19c>
 8001954:	4b75      	ldr	r3, [pc, #468]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	23c0      	movs	r3, #192	; 0xc0
 800195a:	025b      	lsls	r3, r3, #9
 800195c:	401a      	ands	r2, r3
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	429a      	cmp	r2, r3
 8001964:	d116      	bne.n	8001994 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001966:	4b71      	ldr	r3, [pc, #452]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2202      	movs	r2, #2
 800196c:	4013      	ands	r3, r2
 800196e:	d005      	beq.n	800197c <HAL_RCC_OscConfig+0x184>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d001      	beq.n	800197c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e24c      	b.n	8001e16 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197c:	4b6b      	ldr	r3, [pc, #428]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	22f8      	movs	r2, #248	; 0xf8
 8001982:	4393      	bics	r3, r2
 8001984:	0019      	movs	r1, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	00da      	lsls	r2, r3, #3
 800198c:	4b67      	ldr	r3, [pc, #412]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 800198e:	430a      	orrs	r2, r1
 8001990:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001992:	e041      	b.n	8001a18 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d024      	beq.n	80019e6 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800199c:	4b63      	ldr	r3, [pc, #396]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b62      	ldr	r3, [pc, #392]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 80019a2:	2101      	movs	r1, #1
 80019a4:	430a      	orrs	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7fe ff9e 	bl	80008e8 <HAL_GetTick>
 80019ac:	0003      	movs	r3, r0
 80019ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b2:	f7fe ff99 	bl	80008e8 <HAL_GetTick>
 80019b6:	0002      	movs	r2, r0
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e228      	b.n	8001e16 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c4:	4b59      	ldr	r3, [pc, #356]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2202      	movs	r2, #2
 80019ca:	4013      	ands	r3, r2
 80019cc:	d0f1      	beq.n	80019b2 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ce:	4b57      	ldr	r3, [pc, #348]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	22f8      	movs	r2, #248	; 0xf8
 80019d4:	4393      	bics	r3, r2
 80019d6:	0019      	movs	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	00da      	lsls	r2, r3, #3
 80019de:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 80019e0:	430a      	orrs	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e018      	b.n	8001a18 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e6:	4b51      	ldr	r3, [pc, #324]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4b50      	ldr	r3, [pc, #320]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 80019ec:	2101      	movs	r1, #1
 80019ee:	438a      	bics	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7fe ff79 	bl	80008e8 <HAL_GetTick>
 80019f6:	0003      	movs	r3, r0
 80019f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019fc:	f7fe ff74 	bl	80008e8 <HAL_GetTick>
 8001a00:	0002      	movs	r2, r0
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e203      	b.n	8001e16 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0e:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2202      	movs	r2, #2
 8001a14:	4013      	ands	r3, r2
 8001a16:	d1f1      	bne.n	80019fc <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2208      	movs	r2, #8
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d036      	beq.n	8001a90 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d019      	beq.n	8001a5e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2a:	4b40      	ldr	r3, [pc, #256]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a2e:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001a30:	2101      	movs	r1, #1
 8001a32:	430a      	orrs	r2, r1
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a36:	f7fe ff57 	bl	80008e8 <HAL_GetTick>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a40:	f7fe ff52 	bl	80008e8 <HAL_GetTick>
 8001a44:	0002      	movs	r2, r0
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e1e1      	b.n	8001e16 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a52:	4b36      	ldr	r3, [pc, #216]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	2202      	movs	r2, #2
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d0f1      	beq.n	8001a40 <HAL_RCC_OscConfig+0x248>
 8001a5c:	e018      	b.n	8001a90 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a5e:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a62:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001a64:	2101      	movs	r1, #1
 8001a66:	438a      	bics	r2, r1
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6a:	f7fe ff3d 	bl	80008e8 <HAL_GetTick>
 8001a6e:	0003      	movs	r3, r0
 8001a70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a74:	f7fe ff38 	bl	80008e8 <HAL_GetTick>
 8001a78:	0002      	movs	r2, r0
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e1c7      	b.n	8001e16 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a86:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d1f1      	bne.n	8001a74 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2204      	movs	r2, #4
 8001a96:	4013      	ands	r3, r2
 8001a98:	d100      	bne.n	8001a9c <HAL_RCC_OscConfig+0x2a4>
 8001a9a:	e0b5      	b.n	8001c08 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9c:	201f      	movs	r0, #31
 8001a9e:	183b      	adds	r3, r7, r0
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa4:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001aa6:	69da      	ldr	r2, [r3, #28]
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	055b      	lsls	r3, r3, #21
 8001aac:	4013      	ands	r3, r2
 8001aae:	d110      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab0:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001ab2:	69da      	ldr	r2, [r3, #28]
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001ab6:	2180      	movs	r1, #128	; 0x80
 8001ab8:	0549      	lsls	r1, r1, #21
 8001aba:	430a      	orrs	r2, r1
 8001abc:	61da      	str	r2, [r3, #28]
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001ac0:	69da      	ldr	r2, [r3, #28]
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	055b      	lsls	r3, r3, #21
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001acc:	183b      	adds	r3, r7, r0
 8001ace:	2201      	movs	r2, #1
 8001ad0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad2:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_RCC_OscConfig+0x340>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	2380      	movs	r3, #128	; 0x80
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4013      	ands	r3, r2
 8001adc:	d11a      	bne.n	8001b14 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ade:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <HAL_RCC_OscConfig+0x340>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_RCC_OscConfig+0x340>)
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	0049      	lsls	r1, r1, #1
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aec:	f7fe fefc 	bl	80008e8 <HAL_GetTick>
 8001af0:	0003      	movs	r3, r0
 8001af2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af6:	f7fe fef7 	bl	80008e8 <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b64      	cmp	r3, #100	; 0x64
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e186      	b.n	8001e16 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_OscConfig+0x340>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4013      	ands	r3, r2
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d10f      	bne.n	8001b3c <HAL_RCC_OscConfig+0x344>
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001b1e:	6a1a      	ldr	r2, [r3, #32]
 8001b20:	4b02      	ldr	r3, [pc, #8]	; (8001b2c <HAL_RCC_OscConfig+0x334>)
 8001b22:	2101      	movs	r1, #1
 8001b24:	430a      	orrs	r2, r1
 8001b26:	621a      	str	r2, [r3, #32]
 8001b28:	e036      	b.n	8001b98 <HAL_RCC_OscConfig+0x3a0>
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	fffeffff 	.word	0xfffeffff
 8001b34:	fffbffff 	.word	0xfffbffff
 8001b38:	40007000 	.word	0x40007000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10c      	bne.n	8001b5e <HAL_RCC_OscConfig+0x366>
 8001b44:	4bb6      	ldr	r3, [pc, #728]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001b46:	6a1a      	ldr	r2, [r3, #32]
 8001b48:	4bb5      	ldr	r3, [pc, #724]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	438a      	bics	r2, r1
 8001b4e:	621a      	str	r2, [r3, #32]
 8001b50:	4bb3      	ldr	r3, [pc, #716]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001b52:	6a1a      	ldr	r2, [r3, #32]
 8001b54:	4bb2      	ldr	r3, [pc, #712]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001b56:	2104      	movs	r1, #4
 8001b58:	438a      	bics	r2, r1
 8001b5a:	621a      	str	r2, [r3, #32]
 8001b5c:	e01c      	b.n	8001b98 <HAL_RCC_OscConfig+0x3a0>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b05      	cmp	r3, #5
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x388>
 8001b66:	4bae      	ldr	r3, [pc, #696]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001b68:	6a1a      	ldr	r2, [r3, #32]
 8001b6a:	4bad      	ldr	r3, [pc, #692]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001b6c:	2104      	movs	r1, #4
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	621a      	str	r2, [r3, #32]
 8001b72:	4bab      	ldr	r3, [pc, #684]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001b74:	6a1a      	ldr	r2, [r3, #32]
 8001b76:	4baa      	ldr	r3, [pc, #680]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001b78:	2101      	movs	r1, #1
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	621a      	str	r2, [r3, #32]
 8001b7e:	e00b      	b.n	8001b98 <HAL_RCC_OscConfig+0x3a0>
 8001b80:	4ba7      	ldr	r3, [pc, #668]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001b82:	6a1a      	ldr	r2, [r3, #32]
 8001b84:	4ba6      	ldr	r3, [pc, #664]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	438a      	bics	r2, r1
 8001b8a:	621a      	str	r2, [r3, #32]
 8001b8c:	4ba4      	ldr	r3, [pc, #656]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001b8e:	6a1a      	ldr	r2, [r3, #32]
 8001b90:	4ba3      	ldr	r3, [pc, #652]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001b92:	2104      	movs	r1, #4
 8001b94:	438a      	bics	r2, r1
 8001b96:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d014      	beq.n	8001bca <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba0:	f7fe fea2 	bl	80008e8 <HAL_GetTick>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba8:	e009      	b.n	8001bbe <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7fe fe9d 	bl	80008e8 <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	4a9b      	ldr	r2, [pc, #620]	; (8001e24 <HAL_RCC_OscConfig+0x62c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e12b      	b.n	8001e16 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbe:	4b98      	ldr	r3, [pc, #608]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x3b2>
 8001bc8:	e013      	b.n	8001bf2 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bca:	f7fe fe8d 	bl	80008e8 <HAL_GetTick>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd2:	e009      	b.n	8001be8 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd4:	f7fe fe88 	bl	80008e8 <HAL_GetTick>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	4a91      	ldr	r2, [pc, #580]	; (8001e24 <HAL_RCC_OscConfig+0x62c>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e116      	b.n	8001e16 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be8:	4b8d      	ldr	r3, [pc, #564]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	2202      	movs	r2, #2
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bf2:	231f      	movs	r3, #31
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d105      	bne.n	8001c08 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfc:	4b88      	ldr	r3, [pc, #544]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001bfe:	69da      	ldr	r2, [r3, #28]
 8001c00:	4b87      	ldr	r3, [pc, #540]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001c02:	4989      	ldr	r1, [pc, #548]	; (8001e28 <HAL_RCC_OscConfig+0x630>)
 8001c04:	400a      	ands	r2, r1
 8001c06:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2210      	movs	r2, #16
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d063      	beq.n	8001cda <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d12a      	bne.n	8001c70 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c1a:	4b81      	ldr	r3, [pc, #516]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c1e:	4b80      	ldr	r3, [pc, #512]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001c20:	2104      	movs	r1, #4
 8001c22:	430a      	orrs	r2, r1
 8001c24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001c26:	4b7e      	ldr	r3, [pc, #504]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2a:	4b7d      	ldr	r3, [pc, #500]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c32:	f7fe fe59 	bl	80008e8 <HAL_GetTick>
 8001c36:	0003      	movs	r3, r0
 8001c38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c3c:	f7fe fe54 	bl	80008e8 <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e0e3      	b.n	8001e16 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c4e:	4b74      	ldr	r3, [pc, #464]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c52:	2202      	movs	r2, #2
 8001c54:	4013      	ands	r3, r2
 8001c56:	d0f1      	beq.n	8001c3c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c58:	4b71      	ldr	r3, [pc, #452]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5c:	22f8      	movs	r2, #248	; 0xf8
 8001c5e:	4393      	bics	r3, r2
 8001c60:	0019      	movs	r1, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	00da      	lsls	r2, r3, #3
 8001c68:	4b6d      	ldr	r3, [pc, #436]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c6e:	e034      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	3305      	adds	r3, #5
 8001c76:	d111      	bne.n	8001c9c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001c78:	4b69      	ldr	r3, [pc, #420]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c7c:	4b68      	ldr	r3, [pc, #416]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001c7e:	2104      	movs	r1, #4
 8001c80:	438a      	bics	r2, r1
 8001c82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c84:	4b66      	ldr	r3, [pc, #408]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c88:	22f8      	movs	r2, #248	; 0xf8
 8001c8a:	4393      	bics	r3, r2
 8001c8c:	0019      	movs	r1, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	00da      	lsls	r2, r3, #3
 8001c94:	4b62      	ldr	r3, [pc, #392]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001c96:	430a      	orrs	r2, r1
 8001c98:	635a      	str	r2, [r3, #52]	; 0x34
 8001c9a:	e01e      	b.n	8001cda <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c9c:	4b60      	ldr	r3, [pc, #384]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ca0:	4b5f      	ldr	r3, [pc, #380]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001ca2:	2104      	movs	r1, #4
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001ca8:	4b5d      	ldr	r3, [pc, #372]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cac:	4b5c      	ldr	r3, [pc, #368]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001cae:	2101      	movs	r1, #1
 8001cb0:	438a      	bics	r2, r1
 8001cb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb4:	f7fe fe18 	bl	80008e8 <HAL_GetTick>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001cbe:	f7fe fe13 	bl	80008e8 <HAL_GetTick>
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e0a2      	b.n	8001e16 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001cd0:	4b53      	ldr	r3, [pc, #332]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d1f1      	bne.n	8001cbe <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d100      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x4ec>
 8001ce2:	e097      	b.n	8001e14 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ce4:	4b4e      	ldr	r3, [pc, #312]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	220c      	movs	r2, #12
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d100      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x4fa>
 8001cf0:	e06b      	b.n	8001dca <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d14c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfa:	4b49      	ldr	r3, [pc, #292]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b48      	ldr	r3, [pc, #288]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001d00:	494a      	ldr	r1, [pc, #296]	; (8001e2c <HAL_RCC_OscConfig+0x634>)
 8001d02:	400a      	ands	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7fe fdef 	bl	80008e8 <HAL_GetTick>
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d10:	f7fe fdea 	bl	80008e8 <HAL_GetTick>
 8001d14:	0002      	movs	r2, r0
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e079      	b.n	8001e16 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d22:	4b3f      	ldr	r3, [pc, #252]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	049b      	lsls	r3, r3, #18
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d2e:	4b3c      	ldr	r3, [pc, #240]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	220f      	movs	r2, #15
 8001d34:	4393      	bics	r3, r2
 8001d36:	0019      	movs	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d3c:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d42:	4b37      	ldr	r3, [pc, #220]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	4a3a      	ldr	r2, [pc, #232]	; (8001e30 <HAL_RCC_OscConfig+0x638>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	0019      	movs	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	431a      	orrs	r2, r3
 8001d56:	4b32      	ldr	r3, [pc, #200]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d5c:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b2f      	ldr	r3, [pc, #188]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001d62:	2180      	movs	r1, #128	; 0x80
 8001d64:	0449      	lsls	r1, r1, #17
 8001d66:	430a      	orrs	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6a:	f7fe fdbd 	bl	80008e8 <HAL_GetTick>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d74:	f7fe fdb8 	bl	80008e8 <HAL_GetTick>
 8001d78:	0002      	movs	r2, r0
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e047      	b.n	8001e16 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d86:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	049b      	lsls	r3, r3, #18
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x57c>
 8001d92:	e03f      	b.n	8001e14 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d94:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001d9a:	4924      	ldr	r1, [pc, #144]	; (8001e2c <HAL_RCC_OscConfig+0x634>)
 8001d9c:	400a      	ands	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7fe fda2 	bl	80008e8 <HAL_GetTick>
 8001da4:	0003      	movs	r3, r0
 8001da6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001daa:	f7fe fd9d 	bl	80008e8 <HAL_GetTick>
 8001dae:	0002      	movs	r2, r0
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e02c      	b.n	8001e16 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbc:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	049b      	lsls	r3, r3, #18
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d1f0      	bne.n	8001daa <HAL_RCC_OscConfig+0x5b2>
 8001dc8:	e024      	b.n	8001e14 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e01f      	b.n	8001e16 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001dd6:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_RCC_OscConfig+0x628>)
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	23c0      	movs	r3, #192	; 0xc0
 8001de6:	025b      	lsls	r3, r3, #9
 8001de8:	401a      	ands	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d10e      	bne.n	8001e10 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	220f      	movs	r2, #15
 8001df6:	401a      	ands	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d107      	bne.n	8001e10 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	23f0      	movs	r3, #240	; 0xf0
 8001e04:	039b      	lsls	r3, r3, #14
 8001e06:	401a      	ands	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	0018      	movs	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b008      	add	sp, #32
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	40021000 	.word	0x40021000
 8001e24:	00001388 	.word	0x00001388
 8001e28:	efffffff 	.word	0xefffffff
 8001e2c:	feffffff 	.word	0xfeffffff
 8001e30:	ffc27fff 	.word	0xffc27fff

08001e34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0b3      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e48:	4b5b      	ldr	r3, [pc, #364]	; (8001fb8 <HAL_RCC_ClockConfig+0x184>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	4013      	ands	r3, r2
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d911      	bls.n	8001e7a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b58      	ldr	r3, [pc, #352]	; (8001fb8 <HAL_RCC_ClockConfig+0x184>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	4393      	bics	r3, r2
 8001e5e:	0019      	movs	r1, r3
 8001e60:	4b55      	ldr	r3, [pc, #340]	; (8001fb8 <HAL_RCC_ClockConfig+0x184>)
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e68:	4b53      	ldr	r3, [pc, #332]	; (8001fb8 <HAL_RCC_ClockConfig+0x184>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4013      	ands	r3, r2
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d001      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e09a      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	4013      	ands	r3, r2
 8001e82:	d015      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2204      	movs	r2, #4
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d006      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e8e:	4b4b      	ldr	r3, [pc, #300]	; (8001fbc <HAL_RCC_ClockConfig+0x188>)
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	4b4a      	ldr	r3, [pc, #296]	; (8001fbc <HAL_RCC_ClockConfig+0x188>)
 8001e94:	21e0      	movs	r1, #224	; 0xe0
 8001e96:	00c9      	lsls	r1, r1, #3
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e9c:	4b47      	ldr	r3, [pc, #284]	; (8001fbc <HAL_RCC_ClockConfig+0x188>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	22f0      	movs	r2, #240	; 0xf0
 8001ea2:	4393      	bics	r3, r2
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	4b44      	ldr	r3, [pc, #272]	; (8001fbc <HAL_RCC_ClockConfig+0x188>)
 8001eac:	430a      	orrs	r2, r1
 8001eae:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d040      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	4b3e      	ldr	r3, [pc, #248]	; (8001fbc <HAL_RCC_ClockConfig+0x188>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	029b      	lsls	r3, r3, #10
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d114      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e06e      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d107      	bne.n	8001eea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eda:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_RCC_ClockConfig+0x188>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	049b      	lsls	r3, r3, #18
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d108      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e062      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eea:	4b34      	ldr	r3, [pc, #208]	; (8001fbc <HAL_RCC_ClockConfig+0x188>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e05b      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ef8:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <HAL_RCC_ClockConfig+0x188>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2203      	movs	r2, #3
 8001efe:	4393      	bics	r3, r2
 8001f00:	0019      	movs	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_RCC_ClockConfig+0x188>)
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f0c:	f7fe fcec 	bl	80008e8 <HAL_GetTick>
 8001f10:	0003      	movs	r3, r0
 8001f12:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f14:	e009      	b.n	8001f2a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f16:	f7fe fce7 	bl	80008e8 <HAL_GetTick>
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	4a27      	ldr	r2, [pc, #156]	; (8001fc0 <HAL_RCC_ClockConfig+0x18c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e042      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_RCC_ClockConfig+0x188>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	220c      	movs	r2, #12
 8001f30:	401a      	ands	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d1ec      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <HAL_RCC_ClockConfig+0x184>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2201      	movs	r2, #1
 8001f42:	4013      	ands	r3, r2
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d211      	bcs.n	8001f6e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HAL_RCC_ClockConfig+0x184>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	4393      	bics	r3, r2
 8001f52:	0019      	movs	r1, r3
 8001f54:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <HAL_RCC_ClockConfig+0x184>)
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5c:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_RCC_ClockConfig+0x184>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2201      	movs	r2, #1
 8001f62:	4013      	ands	r3, r2
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e020      	b.n	8001fb0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2204      	movs	r2, #4
 8001f74:	4013      	ands	r3, r2
 8001f76:	d009      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f78:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_RCC_ClockConfig+0x188>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4a11      	ldr	r2, [pc, #68]	; (8001fc4 <HAL_RCC_ClockConfig+0x190>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <HAL_RCC_ClockConfig+0x188>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f8c:	f000 f820 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8001f90:	0001      	movs	r1, r0
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_RCC_ClockConfig+0x188>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	091b      	lsrs	r3, r3, #4
 8001f98:	220f      	movs	r2, #15
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <HAL_RCC_ClockConfig+0x194>)
 8001f9e:	5cd3      	ldrb	r3, [r2, r3]
 8001fa0:	000a      	movs	r2, r1
 8001fa2:	40da      	lsrs	r2, r3
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_RCC_ClockConfig+0x198>)
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fa8:	2003      	movs	r0, #3
 8001faa:	f7fe fc57 	bl	800085c <HAL_InitTick>
  
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b004      	add	sp, #16
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40022000 	.word	0x40022000
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	00001388 	.word	0x00001388
 8001fc4:	fffff8ff 	.word	0xfffff8ff
 8001fc8:	080022e8 	.word	0x080022e8
 8001fcc:	20000000 	.word	0x20000000

08001fd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b08f      	sub	sp, #60	; 0x3c
 8001fd4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001fd6:	2314      	movs	r3, #20
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	4a2c      	ldr	r2, [pc, #176]	; (800208c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fdc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001fde:	c313      	stmia	r3!, {r0, r1, r4}
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	4a2a      	ldr	r2, [pc, #168]	; (8002090 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fe8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001fea:	c313      	stmia	r3!, {r0, r1, r4}
 8001fec:	6812      	ldr	r2, [r2, #0]
 8001fee:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002004:	4b23      	ldr	r3, [pc, #140]	; (8002094 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200c:	220c      	movs	r2, #12
 800200e:	4013      	ands	r3, r2
 8002010:	2b04      	cmp	r3, #4
 8002012:	d002      	beq.n	800201a <HAL_RCC_GetSysClockFreq+0x4a>
 8002014:	2b08      	cmp	r3, #8
 8002016:	d003      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x50>
 8002018:	e02f      	b.n	800207a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800201a:	4b1f      	ldr	r3, [pc, #124]	; (8002098 <HAL_RCC_GetSysClockFreq+0xc8>)
 800201c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800201e:	e02f      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002022:	0c9b      	lsrs	r3, r3, #18
 8002024:	220f      	movs	r2, #15
 8002026:	4013      	ands	r3, r2
 8002028:	2214      	movs	r2, #20
 800202a:	18ba      	adds	r2, r7, r2
 800202c:	5cd3      	ldrb	r3, [r2, r3]
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	220f      	movs	r2, #15
 8002036:	4013      	ands	r3, r2
 8002038:	1d3a      	adds	r2, r7, #4
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800203e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002040:	23c0      	movs	r3, #192	; 0xc0
 8002042:	025b      	lsls	r3, r3, #9
 8002044:	401a      	ands	r2, r3
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	025b      	lsls	r3, r3, #9
 800204a:	429a      	cmp	r2, r3
 800204c:	d109      	bne.n	8002062 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800204e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002050:	4811      	ldr	r0, [pc, #68]	; (8002098 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002052:	f7fe f859 	bl	8000108 <__udivsi3>
 8002056:	0003      	movs	r3, r0
 8002058:	001a      	movs	r2, r3
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	4353      	muls	r3, r2
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
 8002060:	e008      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002062:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002064:	480c      	ldr	r0, [pc, #48]	; (8002098 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002066:	f7fe f84f 	bl	8000108 <__udivsi3>
 800206a:	0003      	movs	r3, r0
 800206c:	001a      	movs	r2, r3
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	4353      	muls	r3, r2
 8002072:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002076:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002078:	e002      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <HAL_RCC_GetSysClockFreq+0xc8>)
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800207e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002082:	0018      	movs	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	b00f      	add	sp, #60	; 0x3c
 8002088:	bd90      	pop	{r4, r7, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	080022c8 	.word	0x080022c8
 8002090:	080022d8 	.word	0x080022d8
 8002094:	40021000 	.word	0x40021000
 8002098:	007a1200 	.word	0x007a1200

0800209c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	025b      	lsls	r3, r3, #9
 80020b4:	4013      	ands	r3, r2
 80020b6:	d100      	bne.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80020b8:	e08e      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80020ba:	2017      	movs	r0, #23
 80020bc:	183b      	adds	r3, r7, r0
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c2:	4b5f      	ldr	r3, [pc, #380]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020c4:	69da      	ldr	r2, [r3, #28]
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	055b      	lsls	r3, r3, #21
 80020ca:	4013      	ands	r3, r2
 80020cc:	d110      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	4b5c      	ldr	r3, [pc, #368]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020d0:	69da      	ldr	r2, [r3, #28]
 80020d2:	4b5b      	ldr	r3, [pc, #364]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020d4:	2180      	movs	r1, #128	; 0x80
 80020d6:	0549      	lsls	r1, r1, #21
 80020d8:	430a      	orrs	r2, r1
 80020da:	61da      	str	r2, [r3, #28]
 80020dc:	4b58      	ldr	r3, [pc, #352]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	055b      	lsls	r3, r3, #21
 80020e4:	4013      	ands	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ea:	183b      	adds	r3, r7, r0
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	4b54      	ldr	r3, [pc, #336]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4013      	ands	r3, r2
 80020fa:	d11a      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020fc:	4b51      	ldr	r3, [pc, #324]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b50      	ldr	r3, [pc, #320]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002102:	2180      	movs	r1, #128	; 0x80
 8002104:	0049      	lsls	r1, r1, #1
 8002106:	430a      	orrs	r2, r1
 8002108:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210a:	f7fe fbed 	bl	80008e8 <HAL_GetTick>
 800210e:	0003      	movs	r3, r0
 8002110:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002112:	e008      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002114:	f7fe fbe8 	bl	80008e8 <HAL_GetTick>
 8002118:	0002      	movs	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e087      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002126:	4b47      	ldr	r3, [pc, #284]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4013      	ands	r3, r2
 8002130:	d0f0      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002132:	4b43      	ldr	r3, [pc, #268]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002134:	6a1a      	ldr	r2, [r3, #32]
 8002136:	23c0      	movs	r3, #192	; 0xc0
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4013      	ands	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d034      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	23c0      	movs	r3, #192	; 0xc0
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4013      	ands	r3, r2
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	429a      	cmp	r2, r3
 8002152:	d02c      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002154:	4b3a      	ldr	r3, [pc, #232]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4a3b      	ldr	r2, [pc, #236]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800215a:	4013      	ands	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800215e:	4b38      	ldr	r3, [pc, #224]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002160:	6a1a      	ldr	r2, [r3, #32]
 8002162:	4b37      	ldr	r3, [pc, #220]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002164:	2180      	movs	r1, #128	; 0x80
 8002166:	0249      	lsls	r1, r1, #9
 8002168:	430a      	orrs	r2, r1
 800216a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800216c:	4b34      	ldr	r3, [pc, #208]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800216e:	6a1a      	ldr	r2, [r3, #32]
 8002170:	4b33      	ldr	r3, [pc, #204]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002172:	4936      	ldr	r1, [pc, #216]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002174:	400a      	ands	r2, r1
 8002176:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002178:	4b31      	ldr	r3, [pc, #196]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	4013      	ands	r3, r2
 8002184:	d013      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002186:	f7fe fbaf 	bl	80008e8 <HAL_GetTick>
 800218a:	0003      	movs	r3, r0
 800218c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218e:	e009      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002190:	f7fe fbaa 	bl	80008e8 <HAL_GetTick>
 8002194:	0002      	movs	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	4a2d      	ldr	r2, [pc, #180]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e048      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a4:	4b26      	ldr	r3, [pc, #152]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	2202      	movs	r2, #2
 80021aa:	4013      	ands	r3, r2
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ae:	4b24      	ldr	r3, [pc, #144]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a25      	ldr	r2, [pc, #148]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	0019      	movs	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	4b20      	ldr	r3, [pc, #128]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021be:	430a      	orrs	r2, r1
 80021c0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021c2:	2317      	movs	r3, #23
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d105      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021cc:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021ce:	69da      	ldr	r2, [r3, #28]
 80021d0:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021d2:	4920      	ldr	r1, [pc, #128]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021d4:	400a      	ands	r2, r1
 80021d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2201      	movs	r2, #1
 80021de:	4013      	ands	r3, r2
 80021e0:	d009      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021e2:	4b17      	ldr	r3, [pc, #92]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	2203      	movs	r2, #3
 80021e8:	4393      	bics	r3, r2
 80021ea:	0019      	movs	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021f2:	430a      	orrs	r2, r1
 80021f4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2220      	movs	r2, #32
 80021fc:	4013      	ands	r3, r2
 80021fe:	d009      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	2210      	movs	r2, #16
 8002206:	4393      	bics	r3, r2
 8002208:	0019      	movs	r1, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002210:	430a      	orrs	r2, r1
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	029b      	lsls	r3, r3, #10
 800221c:	4013      	ands	r3, r2
 800221e:	d009      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002220:	4b07      	ldr	r3, [pc, #28]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	2280      	movs	r2, #128	; 0x80
 8002226:	4393      	bics	r3, r2
 8002228:	0019      	movs	r1, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	4b04      	ldr	r3, [pc, #16]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002230:	430a      	orrs	r2, r1
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	0018      	movs	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	b006      	add	sp, #24
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	40021000 	.word	0x40021000
 8002244:	40007000 	.word	0x40007000
 8002248:	fffffcff 	.word	0xfffffcff
 800224c:	fffeffff 	.word	0xfffeffff
 8002250:	00001388 	.word	0x00001388
 8002254:	efffffff 	.word	0xefffffff

08002258 <__libc_init_array>:
 8002258:	b570      	push	{r4, r5, r6, lr}
 800225a:	2600      	movs	r6, #0
 800225c:	4d0c      	ldr	r5, [pc, #48]	; (8002290 <__libc_init_array+0x38>)
 800225e:	4c0d      	ldr	r4, [pc, #52]	; (8002294 <__libc_init_array+0x3c>)
 8002260:	1b64      	subs	r4, r4, r5
 8002262:	10a4      	asrs	r4, r4, #2
 8002264:	42a6      	cmp	r6, r4
 8002266:	d109      	bne.n	800227c <__libc_init_array+0x24>
 8002268:	2600      	movs	r6, #0
 800226a:	f000 f821 	bl	80022b0 <_init>
 800226e:	4d0a      	ldr	r5, [pc, #40]	; (8002298 <__libc_init_array+0x40>)
 8002270:	4c0a      	ldr	r4, [pc, #40]	; (800229c <__libc_init_array+0x44>)
 8002272:	1b64      	subs	r4, r4, r5
 8002274:	10a4      	asrs	r4, r4, #2
 8002276:	42a6      	cmp	r6, r4
 8002278:	d105      	bne.n	8002286 <__libc_init_array+0x2e>
 800227a:	bd70      	pop	{r4, r5, r6, pc}
 800227c:	00b3      	lsls	r3, r6, #2
 800227e:	58eb      	ldr	r3, [r5, r3]
 8002280:	4798      	blx	r3
 8002282:	3601      	adds	r6, #1
 8002284:	e7ee      	b.n	8002264 <__libc_init_array+0xc>
 8002286:	00b3      	lsls	r3, r6, #2
 8002288:	58eb      	ldr	r3, [r5, r3]
 800228a:	4798      	blx	r3
 800228c:	3601      	adds	r6, #1
 800228e:	e7f2      	b.n	8002276 <__libc_init_array+0x1e>
 8002290:	080022f8 	.word	0x080022f8
 8002294:	080022f8 	.word	0x080022f8
 8002298:	080022f8 	.word	0x080022f8
 800229c:	080022fc 	.word	0x080022fc

080022a0 <memset>:
 80022a0:	0003      	movs	r3, r0
 80022a2:	1882      	adds	r2, r0, r2
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d100      	bne.n	80022aa <memset+0xa>
 80022a8:	4770      	bx	lr
 80022aa:	7019      	strb	r1, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	e7f9      	b.n	80022a4 <memset+0x4>

080022b0 <_init>:
 80022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022b6:	bc08      	pop	{r3}
 80022b8:	469e      	mov	lr, r3
 80022ba:	4770      	bx	lr

080022bc <_fini>:
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c2:	bc08      	pop	{r3}
 80022c4:	469e      	mov	lr, r3
 80022c6:	4770      	bx	lr
